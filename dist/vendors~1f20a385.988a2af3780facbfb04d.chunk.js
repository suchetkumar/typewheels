(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~1f20a385"],{

/***/ "22jQ":
/*!********************************************************!*\
  !*** ./node_modules/highcharts/modules/solid-gauge.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n Highcharts JS v8.1.2 (2020-06-16)\n\n Solid angular gauge module\n\n (c) 2010-2019 Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function(a){ true&&module.exports?(a[\"default\"]=a,module.exports=a): true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! highcharts */ \"6n/F\"),__webpack_require__(/*! highcharts/highcharts-more */ \"M8aS\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(g){a(g);a.Highcharts=g;return a}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined})(function(a){function g(a,r,g,c){a.hasOwnProperty(r)||(a[r]=c.apply(null,g))}a=a?a._modules:{};g(a,\"modules/solid-gauge.src.js\",[a[\"parts/Color.js\"],a[\"parts/Globals.js\"],a[\"mixins/legend-symbol.js\"],\na[\"parts/Utilities.js\"]],function(a,g,x,c){var k=a.parse,r=c.clamp,u=c.extend,v=c.isNumber,y=c.merge,t=c.pick,w=c.pInt;a=c.seriesType;c=c.wrap;c(g.Renderer.prototype.symbols,\"arc\",function(e,a,l,b,z,d){e=e(a,l,b,z,d);d.rounded&&(b=((d.r||b)-(d.innerR||0))/2,a=e[0],d=e[2],\"M\"===a[0]&&\"L\"===d[0]&&(a=[\"A\",b,b,0,1,1,a[1],a[2]],e[2]=[\"A\",b,b,0,1,1,d[1],d[2]],e[4]=a));return e});var m;(function(a){var e={initDataClasses:function(a){var e=this.chart,l,d=0,h=this.options;this.dataClasses=l=[];a.dataClasses.forEach(function(b,\nf){b=y(b);l.push(b);b.color||(\"category\"===h.dataClassColor?(f=e.options.colors,b.color=f[d++],d===f.length&&(d=0)):b.color=k(h.minColor).tweenTo(k(h.maxColor),f/(a.dataClasses.length-1)))})},initStops:function(a){this.stops=a.stops||[[0,this.options.minColor],[1,this.options.maxColor]];this.stops.forEach(function(a){a.color=k(a[1])})},toColor:function(a,e){var b=this.stops,d=this.dataClasses,h;if(d)for(h=d.length;h--;){var c=d[h];var f=c.from;b=c.to;if((\"undefined\"===typeof f||a>=f)&&(\"undefined\"===\ntypeof b||a<=b)){var g=c.color;e&&(e.dataClass=h);break}}else{this.logarithmic&&(a=this.val2lin(a));a=1-(this.max-a)/(this.max-this.min);for(h=b.length;h--&&!(a>b[h][0]););f=b[h]||b[h+1];b=b[h+1]||f;a=1-(b[0]-a)/(b[0]-f[0]||1);g=f.color.tweenTo(b.color,a)}return g}};a.init=function(a){u(a,e)}})(m||(m={}));a(\"solidgauge\",\"gauge\",{colorByPoint:!0,dataLabels:{y:0}},{drawLegendSymbol:x.drawRectangle,translate:function(){var a=this.yAxis;m.init(a);!a.dataClasses&&a.options.dataClasses&&a.initDataClasses(a.options);\na.initStops(a.options);g.seriesTypes.gauge.prototype.translate.call(this)},drawPoints:function(){var a=this,c=a.yAxis,g=c.center,b=a.options,m=a.chart.renderer,d=b.overshoot,h=v(d)?d/180*Math.PI:0,k;v(b.threshold)&&(k=c.startAngleRad+c.translate(b.threshold,null,null,null,!0));this.thresholdAngleRad=t(k,c.startAngleRad);a.points.forEach(function(f){if(!f.isNull){var d=f.graphic,e=c.startAngleRad+c.translate(f.y,null,null,null,!0),k=w(t(f.options.radius,b.radius,100))*g[2]/200,n=w(t(f.options.innerRadius,\nb.innerRadius,60))*g[2]/200,p=c.toColor(f.y,f),q=Math.min(c.startAngleRad,c.endAngleRad),l=Math.max(c.startAngleRad,c.endAngleRad);\"none\"===p&&(p=f.color||a.color||\"none\");\"none\"!==p&&(f.color=p);e=r(e,q-h,l+h);!1===b.wrap&&(e=r(e,q,l));q=Math.min(e,a.thresholdAngleRad);e=Math.max(e,a.thresholdAngleRad);e-q>2*Math.PI&&(e=q+2*Math.PI);f.shapeArgs=n={x:g[0],y:g[1],r:k,innerR:n,start:q,end:e,rounded:b.rounded};f.startR=k;d?(k=n.d,d.animate(u({fill:p},n)),k&&(n.d=k)):f.graphic=d=m.arc(n).attr({fill:p,\n\"sweep-flag\":0}).add(a.group);a.chart.styledMode||(\"square\"!==b.linecap&&d.attr({\"stroke-linecap\":\"round\",\"stroke-linejoin\":\"round\"}),d.attr({stroke:b.borderColor||\"none\",\"stroke-width\":b.borderWidth||0}));d&&d.addClass(f.getClassName(),!0)}})},animate:function(a){a||(this.startAngleRad=this.thresholdAngleRad,g.seriesTypes.pie.prototype.animate.call(this,a))}});\"\";return m});g(a,\"masters/modules/solid-gauge.src.js\",[],function(){})});\n//# sourceMappingURL=solid-gauge.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjJqUS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaWdoY2hhcnRzL21vZHVsZXMvc29saWQtZ2F1Z2UuanM/ZGI2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIEhpZ2hjaGFydHMgSlMgdjguMS4yICgyMDIwLTA2LTE2KVxuXG4gU29saWQgYW5ndWxhciBnYXVnZSBtb2R1bGVcblxuIChjKSAyMDEwLTIwMTkgVG9yc3RlaW4gSG9uc2lcblxuIExpY2Vuc2U6IHd3dy5oaWdoY2hhcnRzLmNvbS9saWNlbnNlXG4qL1xuKGZ1bmN0aW9uKGEpe1wib2JqZWN0XCI9PT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz8oYVtcImRlZmF1bHRcIl09YSxtb2R1bGUuZXhwb3J0cz1hKTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImhpZ2hjaGFydHMvbW9kdWxlcy9zb2xpZC1nYXVnZVwiLFtcImhpZ2hjaGFydHNcIixcImhpZ2hjaGFydHMvaGlnaGNoYXJ0cy1tb3JlXCJdLGZ1bmN0aW9uKGcpe2EoZyk7YS5IaWdoY2hhcnRzPWc7cmV0dXJuIGF9KTphKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGlnaGNoYXJ0cz9IaWdoY2hhcnRzOnZvaWQgMCl9KShmdW5jdGlvbihhKXtmdW5jdGlvbiBnKGEscixnLGMpe2EuaGFzT3duUHJvcGVydHkocil8fChhW3JdPWMuYXBwbHkobnVsbCxnKSl9YT1hP2EuX21vZHVsZXM6e307ZyhhLFwibW9kdWxlcy9zb2xpZC1nYXVnZS5zcmMuanNcIixbYVtcInBhcnRzL0NvbG9yLmpzXCJdLGFbXCJwYXJ0cy9HbG9iYWxzLmpzXCJdLGFbXCJtaXhpbnMvbGVnZW5kLXN5bWJvbC5qc1wiXSxcbmFbXCJwYXJ0cy9VdGlsaXRpZXMuanNcIl1dLGZ1bmN0aW9uKGEsZyx4LGMpe3ZhciBrPWEucGFyc2Uscj1jLmNsYW1wLHU9Yy5leHRlbmQsdj1jLmlzTnVtYmVyLHk9Yy5tZXJnZSx0PWMucGljayx3PWMucEludDthPWMuc2VyaWVzVHlwZTtjPWMud3JhcDtjKGcuUmVuZGVyZXIucHJvdG90eXBlLnN5bWJvbHMsXCJhcmNcIixmdW5jdGlvbihlLGEsbCxiLHosZCl7ZT1lKGEsbCxiLHosZCk7ZC5yb3VuZGVkJiYoYj0oKGQucnx8YiktKGQuaW5uZXJSfHwwKSkvMixhPWVbMF0sZD1lWzJdLFwiTVwiPT09YVswXSYmXCJMXCI9PT1kWzBdJiYoYT1bXCJBXCIsYixiLDAsMSwxLGFbMV0sYVsyXV0sZVsyXT1bXCJBXCIsYixiLDAsMSwxLGRbMV0sZFsyXV0sZVs0XT1hKSk7cmV0dXJuIGV9KTt2YXIgbTsoZnVuY3Rpb24oYSl7dmFyIGU9e2luaXREYXRhQ2xhc3NlczpmdW5jdGlvbihhKXt2YXIgZT10aGlzLmNoYXJ0LGwsZD0wLGg9dGhpcy5vcHRpb25zO3RoaXMuZGF0YUNsYXNzZXM9bD1bXTthLmRhdGFDbGFzc2VzLmZvckVhY2goZnVuY3Rpb24oYixcbmYpe2I9eShiKTtsLnB1c2goYik7Yi5jb2xvcnx8KFwiY2F0ZWdvcnlcIj09PWguZGF0YUNsYXNzQ29sb3I/KGY9ZS5vcHRpb25zLmNvbG9ycyxiLmNvbG9yPWZbZCsrXSxkPT09Zi5sZW5ndGgmJihkPTApKTpiLmNvbG9yPWsoaC5taW5Db2xvcikudHdlZW5UbyhrKGgubWF4Q29sb3IpLGYvKGEuZGF0YUNsYXNzZXMubGVuZ3RoLTEpKSl9KX0saW5pdFN0b3BzOmZ1bmN0aW9uKGEpe3RoaXMuc3RvcHM9YS5zdG9wc3x8W1swLHRoaXMub3B0aW9ucy5taW5Db2xvcl0sWzEsdGhpcy5vcHRpb25zLm1heENvbG9yXV07dGhpcy5zdG9wcy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuY29sb3I9ayhhWzFdKX0pfSx0b0NvbG9yOmZ1bmN0aW9uKGEsZSl7dmFyIGI9dGhpcy5zdG9wcyxkPXRoaXMuZGF0YUNsYXNzZXMsaDtpZihkKWZvcihoPWQubGVuZ3RoO2gtLTspe3ZhciBjPWRbaF07dmFyIGY9Yy5mcm9tO2I9Yy50bztpZigoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmfHxhPj1mKSYmKFwidW5kZWZpbmVkXCI9PT1cbnR5cGVvZiBifHxhPD1iKSl7dmFyIGc9Yy5jb2xvcjtlJiYoZS5kYXRhQ2xhc3M9aCk7YnJlYWt9fWVsc2V7dGhpcy5sb2dhcml0aG1pYyYmKGE9dGhpcy52YWwybGluKGEpKTthPTEtKHRoaXMubWF4LWEpLyh0aGlzLm1heC10aGlzLm1pbik7Zm9yKGg9Yi5sZW5ndGg7aC0tJiYhKGE+YltoXVswXSk7KTtmPWJbaF18fGJbaCsxXTtiPWJbaCsxXXx8ZjthPTEtKGJbMF0tYSkvKGJbMF0tZlswXXx8MSk7Zz1mLmNvbG9yLnR3ZWVuVG8oYi5jb2xvcixhKX1yZXR1cm4gZ319O2EuaW5pdD1mdW5jdGlvbihhKXt1KGEsZSl9fSkobXx8KG09e30pKTthKFwic29saWRnYXVnZVwiLFwiZ2F1Z2VcIix7Y29sb3JCeVBvaW50OiEwLGRhdGFMYWJlbHM6e3k6MH19LHtkcmF3TGVnZW5kU3ltYm9sOnguZHJhd1JlY3RhbmdsZSx0cmFuc2xhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnlBeGlzO20uaW5pdChhKTshYS5kYXRhQ2xhc3NlcyYmYS5vcHRpb25zLmRhdGFDbGFzc2VzJiZhLmluaXREYXRhQ2xhc3NlcyhhLm9wdGlvbnMpO1xuYS5pbml0U3RvcHMoYS5vcHRpb25zKTtnLnNlcmllc1R5cGVzLmdhdWdlLnByb3RvdHlwZS50cmFuc2xhdGUuY2FsbCh0aGlzKX0sZHJhd1BvaW50czpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYz1hLnlBeGlzLGc9Yy5jZW50ZXIsYj1hLm9wdGlvbnMsbT1hLmNoYXJ0LnJlbmRlcmVyLGQ9Yi5vdmVyc2hvb3QsaD12KGQpP2QvMTgwKk1hdGguUEk6MCxrO3YoYi50aHJlc2hvbGQpJiYoaz1jLnN0YXJ0QW5nbGVSYWQrYy50cmFuc2xhdGUoYi50aHJlc2hvbGQsbnVsbCxudWxsLG51bGwsITApKTt0aGlzLnRocmVzaG9sZEFuZ2xlUmFkPXQoayxjLnN0YXJ0QW5nbGVSYWQpO2EucG9pbnRzLmZvckVhY2goZnVuY3Rpb24oZil7aWYoIWYuaXNOdWxsKXt2YXIgZD1mLmdyYXBoaWMsZT1jLnN0YXJ0QW5nbGVSYWQrYy50cmFuc2xhdGUoZi55LG51bGwsbnVsbCxudWxsLCEwKSxrPXcodChmLm9wdGlvbnMucmFkaXVzLGIucmFkaXVzLDEwMCkpKmdbMl0vMjAwLG49dyh0KGYub3B0aW9ucy5pbm5lclJhZGl1cyxcbmIuaW5uZXJSYWRpdXMsNjApKSpnWzJdLzIwMCxwPWMudG9Db2xvcihmLnksZikscT1NYXRoLm1pbihjLnN0YXJ0QW5nbGVSYWQsYy5lbmRBbmdsZVJhZCksbD1NYXRoLm1heChjLnN0YXJ0QW5nbGVSYWQsYy5lbmRBbmdsZVJhZCk7XCJub25lXCI9PT1wJiYocD1mLmNvbG9yfHxhLmNvbG9yfHxcIm5vbmVcIik7XCJub25lXCIhPT1wJiYoZi5jb2xvcj1wKTtlPXIoZSxxLWgsbCtoKTshMT09PWIud3JhcCYmKGU9cihlLHEsbCkpO3E9TWF0aC5taW4oZSxhLnRocmVzaG9sZEFuZ2xlUmFkKTtlPU1hdGgubWF4KGUsYS50aHJlc2hvbGRBbmdsZVJhZCk7ZS1xPjIqTWF0aC5QSSYmKGU9cSsyKk1hdGguUEkpO2Yuc2hhcGVBcmdzPW49e3g6Z1swXSx5OmdbMV0scjprLGlubmVyUjpuLHN0YXJ0OnEsZW5kOmUscm91bmRlZDpiLnJvdW5kZWR9O2Yuc3RhcnRSPWs7ZD8oaz1uLmQsZC5hbmltYXRlKHUoe2ZpbGw6cH0sbikpLGsmJihuLmQ9aykpOmYuZ3JhcGhpYz1kPW0uYXJjKG4pLmF0dHIoe2ZpbGw6cCxcblwic3dlZXAtZmxhZ1wiOjB9KS5hZGQoYS5ncm91cCk7YS5jaGFydC5zdHlsZWRNb2RlfHwoXCJzcXVhcmVcIiE9PWIubGluZWNhcCYmZC5hdHRyKHtcInN0cm9rZS1saW5lY2FwXCI6XCJyb3VuZFwiLFwic3Ryb2tlLWxpbmVqb2luXCI6XCJyb3VuZFwifSksZC5hdHRyKHtzdHJva2U6Yi5ib3JkZXJDb2xvcnx8XCJub25lXCIsXCJzdHJva2Utd2lkdGhcIjpiLmJvcmRlcldpZHRofHwwfSkpO2QmJmQuYWRkQ2xhc3MoZi5nZXRDbGFzc05hbWUoKSwhMCl9fSl9LGFuaW1hdGU6ZnVuY3Rpb24oYSl7YXx8KHRoaXMuc3RhcnRBbmdsZVJhZD10aGlzLnRocmVzaG9sZEFuZ2xlUmFkLGcuc2VyaWVzVHlwZXMucGllLnByb3RvdHlwZS5hbmltYXRlLmNhbGwodGhpcyxhKSl9fSk7XCJcIjtyZXR1cm4gbX0pO2coYSxcIm1hc3RlcnMvbW9kdWxlcy9zb2xpZC1nYXVnZS5zcmMuanNcIixbXSxmdW5jdGlvbigpe30pfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb2xpZC1nYXVnZS5qcy5tYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22jQ\n");

/***/ }),

/***/ "8L3F":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.15.0\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nvar timeoutDuration = 0;\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.right - result.left;\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop, 10);\n    var marginLeft = parseFloat(styles.marginLeft, 10);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Popper);\n//# sourceMappingURL=popper.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"yLpj\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8L3F\n");

/***/ }),

/***/ "M8aS":
/*!****************************************************!*\
  !*** ./node_modules/highcharts/highcharts-more.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n Highcharts JS v8.1.2 (2020-06-16)\n\n (c) 2009-2018 Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function(f){ true&&module.exports?(f[\"default\"]=f,module.exports=f): true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! highcharts */ \"6n/F\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(C){f(C);f.Highcharts=C;return f}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined})(function(f){function C(f,a,b,e){f.hasOwnProperty(a)||(f[a]=e.apply(null,b))}f=f?f._modules:{};C(f,\"parts-more/Pane.js\",[f[\"parts/Chart.js\"],f[\"parts/Globals.js\"],f[\"parts/Pointer.js\"],f[\"parts/Utilities.js\"]],function(f,a,b,e){function h(l,\nc,p){return Math.sqrt(Math.pow(l-p[0],2)+Math.pow(c-p[1],2))<p[2]/2}var q=e.addEvent,t=e.extend,x=e.merge,B=e.pick,z=e.splat,c=a.CenteredSeriesMixin;f.prototype.collectionsWithUpdate.push(\"pane\");e=function(){function l(l,c){this.options=this.chart=this.center=this.background=void 0;this.coll=\"pane\";this.defaultOptions={center:[\"50%\",\"50%\"],size:\"85%\",innerSize:\"0%\",startAngle:0};this.defaultBackgroundOptions={shape:\"circle\",borderWidth:1,borderColor:\"#cccccc\",backgroundColor:{linearGradient:{x1:0,\ny1:0,x2:0,y2:1},stops:[[0,\"#ffffff\"],[1,\"#e6e6e6\"]]},from:-Number.MAX_VALUE,innerRadius:0,to:Number.MAX_VALUE,outerRadius:\"105%\"};this.init(l,c)}l.prototype.init=function(l,c){this.chart=c;this.background=[];c.pane.push(this);this.setOptions(l)};l.prototype.setOptions=function(l){this.options=x(this.defaultOptions,this.chart.angular?{background:{}}:void 0,l)};l.prototype.render=function(){var l=this.options,c=this.options.background,a=this.chart.renderer;this.group||(this.group=a.g(\"pane-group\").attr({zIndex:l.zIndex||\n0}).add());this.updateCenter();if(c)for(c=z(c),l=Math.max(c.length,this.background.length||0),a=0;a<l;a++)c[a]&&this.axis?this.renderBackground(x(this.defaultBackgroundOptions,c[a]),a):this.background[a]&&(this.background[a]=this.background[a].destroy(),this.background.splice(a,1))};l.prototype.renderBackground=function(l,c){var a=\"animate\",p={\"class\":\"highcharts-pane \"+(l.className||\"\")};this.chart.styledMode||t(p,{fill:l.backgroundColor,stroke:l.borderColor,\"stroke-width\":l.borderWidth});this.background[c]||\n(this.background[c]=this.chart.renderer.path().add(this.group),a=\"attr\");this.background[c][a]({d:this.axis.getPlotBandPath(l.from,l.to,l)}).attr(p)};l.prototype.updateCenter=function(l){this.center=(l||this.axis||{}).center=c.getCenter.call(this)};l.prototype.update=function(l,c){x(!0,this.options,l);x(!0,this.chart.options.pane,l);this.setOptions(this.options);this.render();this.chart.axes.forEach(function(l){l.pane===this&&(l.pane=null,l.update({},c))},this)};return l}();a.Chart.prototype.getHoverPane=\nfunction(l){var c=this,a;l&&c.pane.forEach(function(p){var e=l.chartX-c.plotLeft,m=l.chartY-c.plotTop;h(c.inverted?m:e,c.inverted?e:m,p.center)&&(a=p)});return a};q(f,\"afterIsInsidePlot\",function(l){this.polar&&(l.isInsidePlot=this.pane.some(function(c){return h(l.x,l.y,c.center)}))});q(b,\"beforeGetHoverData\",function(l){var c=this.chart;c.polar&&(c.hoverPane=c.getHoverPane(l),l.filter=function(a){return a.visible&&!(!l.shared&&a.directTouch)&&B(a.options.enableMouseTracking,!0)&&(!c.hoverPane||a.xAxis.pane===\nc.hoverPane)})});q(b,\"afterGetHoverData\",function(c){var l=this.chart;c.hoverPoint&&c.hoverPoint.plotX&&c.hoverPoint.plotY&&l.hoverPane&&!h(c.hoverPoint.plotX,c.hoverPoint.plotY,l.hoverPane.center)&&(c.hoverPoint=void 0)});a.Pane=e;return a.Pane});C(f,\"parts-more/HiddenAxis.js\",[],function(){return function(){function f(){}f.init=function(a){a.getOffset=function(){};a.redraw=function(){this.isDirty=!1};a.render=function(){this.isDirty=!1};a.createLabelCollector=function(){return function(){}};a.setScale=\nfunction(){};a.setCategories=function(){};a.setTitle=function(){};a.isHidden=!0};return f}()});C(f,\"parts-more/RadialAxis.js\",[f[\"parts/Axis.js\"],f[\"parts/Tick.js\"],f[\"parts-more/HiddenAxis.js\"],f[\"parts/Utilities.js\"]],function(f,a,b,e){var h=e.addEvent,q=e.correctFloat,t=e.defined,x=e.extend,B=e.fireEvent,z=e.merge,c=e.pick,l=e.relativeLength,w=e.wrap;e=function(){function a(){}a.init=function(a){var h=f.prototype;a.setOptions=function(m){m=this.options=z(a.constructor.defaultOptions,this.defaultPolarOptions,\nm);m.plotBands||(m.plotBands=[]);B(this,\"afterSetOptions\")};a.getOffset=function(){h.getOffset.call(this);this.chart.axisOffset[this.side]=0};a.getLinePath=function(m,n,d){m=this.pane.center;var g=this.chart,k=c(n,m[2]/2-this.offset);\"undefined\"===typeof d&&(d=this.horiz?0:this.center&&-this.center[3]/2);d&&(k+=d);this.isCircular||\"undefined\"!==typeof n?(n=this.chart.renderer.symbols.arc(this.left+m[0],this.top+m[1],k,k,{start:this.startAngleRad,end:this.endAngleRad,open:!0,innerR:0}),n.xBounds=[this.left+\nm[0]],n.yBounds=[this.top+m[1]-k]):(n=this.postTranslate(this.angleRad,k),n=[[\"M\",this.center[0]+g.plotLeft,this.center[1]+g.plotTop],[\"L\",n.x,n.y]]);return n};a.setAxisTranslation=function(){h.setAxisTranslation.call(this);this.center&&(this.transA=this.isCircular?(this.endAngleRad-this.startAngleRad)/(this.max-this.min||1):(this.center[2]-this.center[3])/2/(this.max-this.min||1),this.minPixelPadding=this.isXAxis?this.transA*this.minPointOffset:0)};a.beforeSetTickPositions=function(){this.autoConnect=\nthis.isCircular&&\"undefined\"===typeof c(this.userMax,this.options.max)&&q(this.endAngleRad-this.startAngleRad)===q(2*Math.PI);!this.isCircular&&this.chart.inverted&&this.max++;this.autoConnect&&(this.max+=this.categories&&1||this.pointRange||this.closestPointRange||0)};a.setAxisSize=function(){h.setAxisSize.call(this);if(this.isRadial){this.pane.updateCenter(this);var m=this.center=x([],this.pane.center);if(this.isCircular)this.sector=this.endAngleRad-this.startAngleRad;else{var n=this.postTranslate(this.angleRad,\nm[3]/2);m[0]=n.x-this.chart.plotLeft;m[1]=n.y-this.chart.plotTop}this.len=this.width=this.height=(m[2]-m[3])*c(this.sector,1)/2}};a.getPosition=function(m,n){m=this.translate(m);return this.postTranslate(this.isCircular?m:this.angleRad,c(this.isCircular?n:0>m?0:m,this.center[2]/2)-this.offset)};a.postTranslate=function(m,n){var d=this.chart,g=this.center;m=this.startAngleRad+m;return{x:d.plotLeft+g[0]+Math.cos(m)*n,y:d.plotTop+g[1]+Math.sin(m)*n}};a.getPlotBandPath=function(m,n,d){var g=function(d){if(\"string\"===\ntypeof d){var g=parseInt(d,10);D.test(d)&&(g=g*A/100);return g}return d},k=this.center,u=this.startAngleRad,A=k[2]/2,r=Math.min(this.offset,0),D=/%$/;var l=this.isCircular;var a=c(g(d.outerRadius),A),h=g(d.innerRadius);g=c(g(d.thickness),10);if(\"polygon\"===this.options.gridLineInterpolation)r=this.getPlotLinePath({value:m}).concat(this.getPlotLinePath({value:n,reverse:!0}));else{m=Math.max(m,this.min);n=Math.min(n,this.max);m=this.translate(m);n=this.translate(n);l||(a=m||0,h=n||0);if(\"circle\"!==\nd.shape&&l)d=u+(m||0),u+=n||0;else{d=-Math.PI/2;u=1.5*Math.PI;var p=!0}a-=r;r=this.chart.renderer.symbols.arc(this.left+k[0],this.top+k[1],a,a,{start:Math.min(d,u),end:Math.max(d,u),innerR:c(h,a-(g-r)),open:p});l&&(l=(u+d)/2,p=this.left+k[0]+k[2]/2*Math.cos(l),r.xBounds=l>-Math.PI/2&&l<Math.PI/2?[p,this.chart.plotWidth]:[0,p],r.yBounds=[this.top+k[1]+k[2]/2*Math.sin(l)],r.yBounds[0]+=l>-Math.PI&&0>l||l>Math.PI?-10:10)}return r};a.getCrosshairPosition=function(m,n,d){var g=m.value,k=this.pane.center;\nif(this.isCircular){if(t(g))m.point&&(u=m.point.shapeArgs||{},u.start&&(g=this.chart.inverted?this.translate(m.point.rectPlotY,!0):m.point.x));else{var u=m.chartX||0;var A=m.chartY||0;g=this.translate(Math.atan2(A-d,u-n)-this.startAngleRad,!0)}m=this.getPosition(g);u=m.x;A=m.y}else t(g)||(u=m.chartX,A=m.chartY),t(u)&&t(A)&&(d=k[1]+this.chart.plotTop,g=this.translate(Math.min(Math.sqrt(Math.pow(u-n,2)+Math.pow(A-d,2)),k[2]/2)-k[3]/2,!0));return[g,u||0,A||0]};a.getPlotLinePath=function(m){var n=this,\nd=n.pane.center,g=n.chart,k=g.inverted,u=m.value,A=m.reverse,r=n.getPosition(u),c=n.pane.options.background?n.pane.options.background[0]||n.pane.options.background:{},a=c.innerRadius||\"0%\",h=c.outerRadius||\"100%\";c=d[0]+g.plotLeft;var p=d[1]+g.plotTop,e=r.x,b=r.y,w=n.height;r=d[3]/2;var q;m.isCrosshair&&(b=this.getCrosshairPosition(m,c,p),u=b[0],e=b[1],b=b[2]);if(n.isCircular)u=Math.sqrt(Math.pow(e-c,2)+Math.pow(b-p,2)),A=\"string\"===typeof a?l(a,1):a/u,g=\"string\"===typeof h?l(h,1):h/u,d&&r&&(u=r/\nu,A<u&&(A=u),g<u&&(g=u)),d=[[\"M\",c+A*(e-c),p-A*(p-b)],[\"L\",e-(1-g)*(e-c),b+(1-g)*(p-b)]];else if((u=n.translate(u))&&(0>u||u>w)&&(u=0),\"circle\"===n.options.gridLineInterpolation)d=n.getLinePath(0,u,r);else if(d=[],g[k?\"yAxis\":\"xAxis\"].forEach(function(d){d.pane===n.pane&&(q=d)}),q)for(c=q.tickPositions,q.autoConnect&&(c=c.concat([c[0]])),A&&(c=c.slice().reverse()),u&&(u+=r),e=0;e<c.length;e++)p=q.getPosition(c[e],u),d.push(e?[\"L\",p.x,p.y]:[\"M\",p.x,p.y]);return d};a.getTitlePosition=function(){var c=\nthis.center,n=this.chart,d=this.options.title;return{x:n.plotLeft+c[0]+(d.x||0),y:n.plotTop+c[1]-{high:.5,middle:.25,low:0}[d.align]*c[2]+(d.y||0)}};a.createLabelCollector=function(){var c=this;return function(){if(c.isRadial&&c.tickPositions&&!0!==c.options.labels.allowOverlap)return c.tickPositions.map(function(n){return c.ticks[n]&&c.ticks[n].label}).filter(function(n){return!!n})}}};a.compose=function(p,e){h(p,\"init\",function(c){var n=this.chart,d=n.inverted,g=n.angular,k=n.polar,u=this.isXAxis,\nA=this.coll,r=g&&u,l,m=n.options;c=c.userOptions.pane||0;c=this.pane=n.pane&&n.pane[c];if(\"colorAxis\"===A)this.isRadial=!1;else{if(g){if(r?b.init(this):a.init(this),l=!u)this.defaultPolarOptions=a.defaultRadialGaugeOptions}else k&&(a.init(this),this.defaultPolarOptions=(l=this.horiz)?a.defaultCircularOptions:z(\"xAxis\"===A?p.defaultOptions:p.defaultYAxisOptions,a.defaultRadialOptions),d&&\"yAxis\"===A&&(this.defaultPolarOptions.stackLabels=p.defaultYAxisOptions.stackLabels));g||k?(this.isRadial=!0,m.chart.zoomType=\nnull,this.labelCollector||(this.labelCollector=this.createLabelCollector()),this.labelCollector&&n.labelCollectors.push(this.labelCollector)):this.isRadial=!1;c&&l&&(c.axis=this);this.isCircular=l}});h(p,\"afterInit\",function(){var l=this.chart,n=this.options,d=this.pane,g=d&&d.options;l.angular&&this.isXAxis||!d||!l.angular&&!l.polar||(this.angleRad=(n.angle||0)*Math.PI/180,this.startAngleRad=(g.startAngle-90)*Math.PI/180,this.endAngleRad=(c(g.endAngle,g.startAngle+360)-90)*Math.PI/180,this.offset=\nn.offset||0)});h(p,\"autoLabelAlign\",function(c){this.isRadial&&(c.align=void 0,c.preventDefault())});h(p,\"destroy\",function(){if(this.chart&&this.chart.labelCollectors){var c=this.labelCollector?this.chart.labelCollectors.indexOf(this.labelCollector):-1;0<=c&&this.chart.labelCollectors.splice(c,1)}});h(p,\"initialAxisTranslation\",function(){this.isRadial&&this.beforeSetTickPositions()});h(e,\"afterGetPosition\",function(c){this.axis.getPosition&&x(c.pos,this.axis.getPosition(this.pos))});h(e,\"afterGetLabelPosition\",\nfunction(a){var n=this.axis,d=this.label;if(d){var g=d.getBBox(),k=n.options.labels,u=k.y,A=20,r=k.align,m=(n.translate(this.pos)+n.startAngleRad+Math.PI/2)/Math.PI*180%360,p=Math.round(m),h=\"end\",e=0>p?p+360:p,b=e,w=0,q=0,v=null===k.y?.3*-g.height:0;if(n.isRadial){var y=n.getPosition(this.pos,n.center[2]/2+l(c(k.distance,-25),n.center[2]/2,-n.center[2]/2));\"auto\"===k.rotation?d.attr({rotation:m}):null===u&&(u=n.chart.renderer.fontMetrics(d.styles&&d.styles.fontSize).b-g.height/2);null===r&&(n.isCircular?\n(g.width>n.len*n.tickInterval/(n.max-n.min)&&(A=0),r=m>A&&m<180-A?\"left\":m>180+A&&m<360-A?\"right\":\"center\"):r=\"center\",d.attr({align:r}));if(\"auto\"===r&&2===n.tickPositions.length&&n.isCircular){90<e&&180>e?e=180-e:270<e&&360>=e&&(e=540-e);180<b&&360>=b&&(b=360-b);if(n.pane.options.startAngle===p||n.pane.options.startAngle===p+360||n.pane.options.startAngle===p-360)h=\"start\";r=-90<=p&&90>=p||-360<=p&&-270>=p||270<=p&&360>=p?\"start\"===h?\"right\":\"left\":\"start\"===h?\"left\":\"right\";70<b&&110>b&&(r=\"center\");\n15>e||180<=e&&195>e?w=.3*g.height:15<=e&&35>=e?w=\"start\"===h?0:.75*g.height:195<=e&&215>=e?w=\"start\"===h?.75*g.height:0:35<e&&90>=e?w=\"start\"===h?.25*-g.height:g.height:215<e&&270>=e&&(w=\"start\"===h?g.height:.25*-g.height);15>b?q=\"start\"===h?.15*-g.height:.15*g.height:165<b&&180>=b&&(q=\"start\"===h?.15*g.height:.15*-g.height);d.attr({align:r});d.translate(q,w+v)}a.pos.x=y.x+k.x;a.pos.y=y.y+u}}});w(e.prototype,\"getMarkPath\",function(c,n,d,g,k,u,A){var r=this.axis;r.isRadial?(c=r.getPosition(this.pos,\nr.center[2]/2+g),n=[\"M\",n,d,\"L\",c.x,c.y]):n=c.call(this,n,d,g,k,u,A);return n})};a.defaultCircularOptions={gridLineWidth:1,labels:{align:null,distance:15,x:0,y:null,style:{textOverflow:\"none\"}},maxPadding:0,minPadding:0,showLastLabel:!1,tickLength:0};a.defaultRadialGaugeOptions={labels:{align:\"center\",x:0,y:null},minorGridLineWidth:0,minorTickInterval:\"auto\",minorTickLength:10,minorTickPosition:\"inside\",minorTickWidth:1,tickLength:10,tickPosition:\"inside\",tickWidth:2,title:{rotation:0},zIndex:2};\na.defaultRadialOptions={gridLineInterpolation:\"circle\",gridLineWidth:1,labels:{align:\"right\",x:-3,y:-2},showLastLabel:!1,title:{x:4,text:null,rotation:90}};return a}();e.compose(f,a);return e});C(f,\"parts-more/AreaRangeSeries.js\",[f[\"parts/Globals.js\"],f[\"parts/Point.js\"],f[\"parts/Utilities.js\"]],function(f,a,b){var e=b.defined,h=b.extend,q=b.isArray,t=b.isNumber,x=b.pick;b=b.seriesType;var B=f.seriesTypes,z=f.Series.prototype,c=a.prototype;b(\"arearange\",\"area\",{lineWidth:1,threshold:null,tooltip:{pointFormat:'<span style=\"color:{series.color}\">\\u25cf</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'},\ntrackByArea:!0,dataLabels:{align:void 0,verticalAlign:void 0,xLow:0,xHigh:0,yLow:0,yHigh:0}},{pointArrayMap:[\"low\",\"high\"],pointValKey:\"low\",deferTranslatePolar:!0,toYData:function(c){return[c.low,c.high]},highToXY:function(c){var l=this.chart,a=this.xAxis.postTranslate(c.rectPlotX,this.yAxis.len-c.plotHigh);c.plotHighX=a.x-l.plotLeft;c.plotHigh=a.y-l.plotTop;c.plotLowX=c.plotX},translate:function(){var c=this,a=c.yAxis,p=!!c.modifyValue;B.area.prototype.translate.apply(c);c.points.forEach(function(l){var e=\nl.high,m=l.plotY;l.isNull?l.plotY=null:(l.plotLow=m,l.plotHigh=a.translate(p?c.modifyValue(e,l):e,0,1,0,1),p&&(l.yBottom=l.plotHigh))});this.chart.polar&&this.points.forEach(function(l){c.highToXY(l);l.tooltipPos=[(l.plotHighX+l.plotLowX)/2,(l.plotHigh+l.plotLow)/2]})},getGraphPath:function(c){var a=[],l=[],e,h=B.area.prototype.getGraphPath;var m=this.options;var n=this.chart.polar&&!1!==m.connectEnds,d=m.connectNulls,g=m.step;c=c||this.points;for(e=c.length;e--;){var k=c[e];k.isNull||n||d||c[e+1]&&\n!c[e+1].isNull||l.push({plotX:k.plotX,plotY:k.plotY,doCurve:!1});var u={polarPlotY:k.polarPlotY,rectPlotX:k.rectPlotX,yBottom:k.yBottom,plotX:x(k.plotHighX,k.plotX),plotY:k.plotHigh,isNull:k.isNull};l.push(u);a.push(u);k.isNull||n||d||c[e-1]&&!c[e-1].isNull||l.push({plotX:k.plotX,plotY:k.plotY,doCurve:!1})}c=h.call(this,c);g&&(!0===g&&(g=\"left\"),m.step={left:\"right\",center:\"center\",right:\"left\"}[g]);a=h.call(this,a);l=h.call(this,l);m.step=g;m=[].concat(c,a);!this.chart.polar&&l[0]&&\"M\"===l[0][0]&&\n(l[0]=[\"L\",l[0][1],l[0][2]]);this.graphPath=m;this.areaPath=c.concat(l);m.isArea=!0;m.xMap=c.xMap;this.areaPath.xMap=c.xMap;return m},drawDataLabels:function(){var c=this.points,a=c.length,e,b=[],f=this.options.dataLabels,m,n=this.chart.inverted;if(q(f))if(1<f.length){var d=f[0];var g=f[1]}else d=f[0],g={enabled:!1};else d=h({},f),d.x=f.xHigh,d.y=f.yHigh,g=h({},f),g.x=f.xLow,g.y=f.yLow;if(d.enabled||this._hasPointLabels){for(e=a;e--;)if(m=c[e]){var k=d.inside?m.plotHigh<m.plotLow:m.plotHigh>m.plotLow;\nm.y=m.high;m._plotY=m.plotY;m.plotY=m.plotHigh;b[e]=m.dataLabel;m.dataLabel=m.dataLabelUpper;m.below=k;n?d.align||(d.align=k?\"right\":\"left\"):d.verticalAlign||(d.verticalAlign=k?\"top\":\"bottom\")}this.options.dataLabels=d;z.drawDataLabels&&z.drawDataLabels.apply(this,arguments);for(e=a;e--;)if(m=c[e])m.dataLabelUpper=m.dataLabel,m.dataLabel=b[e],delete m.dataLabels,m.y=m.low,m.plotY=m._plotY}if(g.enabled||this._hasPointLabels){for(e=a;e--;)if(m=c[e])k=g.inside?m.plotHigh<m.plotLow:m.plotHigh>m.plotLow,\nm.below=!k,n?g.align||(g.align=k?\"left\":\"right\"):g.verticalAlign||(g.verticalAlign=k?\"bottom\":\"top\");this.options.dataLabels=g;z.drawDataLabels&&z.drawDataLabels.apply(this,arguments)}if(d.enabled)for(e=a;e--;)if(m=c[e])m.dataLabels=[m.dataLabelUpper,m.dataLabel].filter(function(d){return!!d});this.options.dataLabels=f},alignDataLabel:function(){B.column.prototype.alignDataLabel.apply(this,arguments)},drawPoints:function(){var c=this.points.length,a;z.drawPoints.apply(this,arguments);for(a=0;a<c;){var b=\nthis.points[a];b.origProps={plotY:b.plotY,plotX:b.plotX,isInside:b.isInside,negative:b.negative,zone:b.zone,y:b.y};b.lowerGraphic=b.graphic;b.graphic=b.upperGraphic;b.plotY=b.plotHigh;e(b.plotHighX)&&(b.plotX=b.plotHighX);b.y=b.high;b.negative=b.high<(this.options.threshold||0);b.zone=this.zones.length&&b.getZone();this.chart.polar||(b.isInside=b.isTopInside=\"undefined\"!==typeof b.plotY&&0<=b.plotY&&b.plotY<=this.yAxis.len&&0<=b.plotX&&b.plotX<=this.xAxis.len);a++}z.drawPoints.apply(this,arguments);\nfor(a=0;a<c;)b=this.points[a],b.upperGraphic=b.graphic,b.graphic=b.lowerGraphic,h(b,b.origProps),delete b.origProps,a++},setStackedPoints:f.noop},{setState:function(){var a=this.state,b=this.series,h=b.chart.polar;e(this.plotHigh)||(this.plotHigh=b.yAxis.toPixels(this.high,!0));e(this.plotLow)||(this.plotLow=this.plotY=b.yAxis.toPixels(this.low,!0));b.stateMarkerGraphic&&(b.lowerStateMarkerGraphic=b.stateMarkerGraphic,b.stateMarkerGraphic=b.upperStateMarkerGraphic);this.graphic=this.upperGraphic;\nthis.plotY=this.plotHigh;h&&(this.plotX=this.plotHighX);c.setState.apply(this,arguments);this.state=a;this.plotY=this.plotLow;this.graphic=this.lowerGraphic;h&&(this.plotX=this.plotLowX);b.stateMarkerGraphic&&(b.upperStateMarkerGraphic=b.stateMarkerGraphic,b.stateMarkerGraphic=b.lowerStateMarkerGraphic,b.lowerStateMarkerGraphic=void 0);c.setState.apply(this,arguments)},haloPath:function(){var a=this.series.chart.polar,b=[];this.plotY=this.plotLow;a&&(this.plotX=this.plotLowX);this.isInside&&(b=c.haloPath.apply(this,\narguments));this.plotY=this.plotHigh;a&&(this.plotX=this.plotHighX);this.isTopInside&&(b=b.concat(c.haloPath.apply(this,arguments)));return b},destroyElements:function(){[\"lowerGraphic\",\"upperGraphic\"].forEach(function(c){this[c]&&(this[c]=this[c].destroy())},this);this.graphic=null;return c.destroyElements.apply(this,arguments)},isValid:function(){return t(this.low)&&t(this.high)}});\"\"});C(f,\"parts-more/AreaSplineRangeSeries.js\",[f[\"parts/Globals.js\"],f[\"parts/Utilities.js\"]],function(f,a){a=a.seriesType;\na(\"areasplinerange\",\"arearange\",null,{getPointSpline:f.seriesTypes.spline.prototype.getPointSpline});\"\"});C(f,\"parts-more/ColumnRangeSeries.js\",[f[\"parts/Globals.js\"],f[\"parts/Options.js\"],f[\"parts/Utilities.js\"]],function(f,a,b){a=a.defaultOptions;var e=b.clamp,h=b.merge,q=b.pick;b=b.seriesType;var t=f.noop,x=f.seriesTypes.column.prototype;b(\"columnrange\",\"arearange\",h(a.plotOptions.column,a.plotOptions.arearange,{pointRange:null,marker:null,states:{hover:{halo:!1}}}),{translate:function(){var a=\nthis,b=a.yAxis,c=a.xAxis,l=c.startAngleRad,h,p=a.chart,f=a.xAxis.isRadial,t=Math.max(p.chartWidth,p.chartHeight)+999,m;x.translate.apply(a);a.points.forEach(function(n){var d=n.shapeArgs,g=a.options.minPointLength;n.plotHigh=m=e(b.translate(n.high,0,1,0,1),-t,t);n.plotLow=e(n.plotY,-t,t);var k=m;var u=q(n.rectPlotY,n.plotY)-m;Math.abs(u)<g?(g-=u,u+=g,k-=g/2):0>u&&(u*=-1,k-=u);f?(h=n.barX+l,n.shapeType=\"arc\",n.shapeArgs=a.polarArc(k+u,k,h,h+n.pointWidth)):(d.height=u,d.y=k,n.tooltipPos=p.inverted?\n[b.len+b.pos-p.plotLeft-k-u/2,c.len+c.pos-p.plotTop-d.x-d.width/2,u]:[c.left-p.plotLeft+d.x+d.width/2,b.pos-p.plotTop+k+u/2,u])})},directTouch:!0,trackerGroups:[\"group\",\"dataLabelsGroup\"],drawGraph:t,getSymbol:t,crispCol:function(){return x.crispCol.apply(this,arguments)},drawPoints:function(){return x.drawPoints.apply(this,arguments)},drawTracker:function(){return x.drawTracker.apply(this,arguments)},getColumnMetrics:function(){return x.getColumnMetrics.apply(this,arguments)},pointAttribs:function(){return x.pointAttribs.apply(this,\narguments)},animate:function(){return x.animate.apply(this,arguments)},polarArc:function(){return x.polarArc.apply(this,arguments)},translate3dPoints:function(){return x.translate3dPoints.apply(this,arguments)},translate3dShapes:function(){return x.translate3dShapes.apply(this,arguments)}},{setState:x.pointClass.prototype.setState});\"\"});C(f,\"parts-more/ColumnPyramidSeries.js\",[f[\"parts/Globals.js\"],f[\"parts/Utilities.js\"]],function(f,a){var b=a.clamp,e=a.pick;a=a.seriesType;var h=f.seriesTypes.column.prototype;\na(\"columnpyramid\",\"column\",{},{translate:function(){var a=this,f=a.chart,x=a.options,B=a.dense=2>a.closestPointRange*a.xAxis.transA;B=a.borderWidth=e(x.borderWidth,B?0:1);var z=a.yAxis,c=x.threshold,l=a.translatedThreshold=z.getThreshold(c),w=e(x.minPointLength,5),p=a.getColumnMetrics(),y=p.width,v=a.barW=Math.max(y,1+2*B),m=a.pointXOffset=p.offset;f.inverted&&(l-=.5);x.pointPadding&&(v=Math.ceil(v));h.translate.apply(a);a.points.forEach(function(n){var d=e(n.yBottom,l),g=999+Math.abs(d),k=b(n.plotY,\n-g,z.len+g);g=n.plotX+m;var u=v/2,A=Math.min(k,d);d=Math.max(k,d)-A;var r;n.barX=g;n.pointWidth=y;n.tooltipPos=f.inverted?[z.len+z.pos-f.plotLeft-k,a.xAxis.len-g-u,d]:[g+u,k+z.pos-f.plotTop,d];k=c+(n.total||n.y);\"percent\"===x.stacking&&(k=c+(0>n.y)?-100:100);k=z.toPixels(k,!0);var D=(r=f.plotHeight-k-(f.plotHeight-l))?u*(A-k)/r:0;var h=r?u*(A+d-k)/r:0;r=g-D+u;D=g+D+u;var p=g+h+u;h=g-h+u;var q=A-w;var E=A+d;0>n.y&&(q=A,E=A+d+w);f.inverted&&(p=f.plotWidth-A,r=k-(f.plotWidth-l),D=u*(k-p)/r,h=u*(k-(p-\nd))/r,r=g+u+D,D=r-2*D,p=g-h+u,h=g+h+u,q=A,E=A+d-w,0>n.y&&(E=A+d+w));n.shapeType=\"path\";n.shapeArgs={x:r,y:q,width:D-r,height:d,d:[[\"M\",r,q],[\"L\",D,q],[\"L\",p,E],[\"L\",h,E],[\"Z\"]]}})}});\"\"});C(f,\"parts-more/GaugeSeries.js\",[f[\"parts/Globals.js\"],f[\"parts/Utilities.js\"]],function(f,a){var b=a.clamp,e=a.isNumber,h=a.merge,q=a.pick,t=a.pInt;a=a.seriesType;var x=f.Series,B=f.TrackerMixin;a(\"gauge\",\"line\",{dataLabels:{borderColor:\"#cccccc\",borderRadius:3,borderWidth:1,crop:!1,defer:!1,enabled:!0,verticalAlign:\"top\",\ny:15,zIndex:2},dial:{},pivot:{},tooltip:{headerFormat:\"\"},showInLegend:!1},{angular:!0,directTouch:!0,drawGraph:f.noop,fixedBox:!0,forceDL:!0,noSharedTooltip:!0,trackerGroups:[\"group\",\"dataLabelsGroup\"],translate:function(){var a=this.yAxis,c=this.options,l=a.center;this.generatePoints();this.points.forEach(function(f){var p=h(c.dial,f.dial),w=t(q(p.radius,\"80%\"))*l[2]/200,v=t(q(p.baseLength,\"70%\"))*w/100,m=t(q(p.rearLength,\"10%\"))*w/100,n=p.baseWidth||3,d=p.topWidth||1,g=c.overshoot,k=a.startAngleRad+\na.translate(f.y,null,null,null,!0);if(e(g)||!1===c.wrap)g=e(g)?g/180*Math.PI:0,k=b(k,a.startAngleRad-g,a.endAngleRad+g);k=180*k/Math.PI;f.shapeType=\"path\";f.shapeArgs={d:p.path||[[\"M\",-m,-n/2],[\"L\",v,-n/2],[\"L\",w,-d/2],[\"L\",w,d/2],[\"L\",v,n/2],[\"L\",-m,n/2],[\"Z\"]],translateX:l[0],translateY:l[1],rotation:k};f.plotX=l[0];f.plotY=l[1]})},drawPoints:function(){var a=this,c=a.chart,b=a.yAxis.center,e=a.pivot,f=a.options,t=f.pivot,v=c.renderer;a.points.forEach(function(b){var n=b.graphic,d=b.shapeArgs,g=\nd.d,k=h(f.dial,b.dial);n?(n.animate(d),d.d=g):b.graphic=v[b.shapeType](d).attr({rotation:d.rotation,zIndex:1}).addClass(\"highcharts-dial\").add(a.group);if(!c.styledMode)b.graphic[n?\"animate\":\"attr\"]({stroke:k.borderColor||\"none\",\"stroke-width\":k.borderWidth||0,fill:k.backgroundColor||\"#000000\"})});e?e.animate({translateX:b[0],translateY:b[1]}):(a.pivot=v.circle(0,0,q(t.radius,5)).attr({zIndex:2}).addClass(\"highcharts-pivot\").translate(b[0],b[1]).add(a.group),c.styledMode||a.pivot.attr({\"stroke-width\":t.borderWidth||\n0,stroke:t.borderColor||\"#cccccc\",fill:t.backgroundColor||\"#000000\"}))},animate:function(a){var c=this;a||c.points.forEach(function(a){var b=a.graphic;b&&(b.attr({rotation:180*c.yAxis.startAngleRad/Math.PI}),b.animate({rotation:a.shapeArgs.rotation},c.options.animation))})},render:function(){this.group=this.plotGroup(\"group\",\"series\",this.visible?\"visible\":\"hidden\",this.options.zIndex,this.chart.seriesGroup);x.prototype.render.call(this);this.group.clip(this.chart.clipRect)},setData:function(a,c){x.prototype.setData.call(this,\na,!1);this.processData();this.generatePoints();q(c,!0)&&this.chart.redraw()},hasData:function(){return!!this.points.length},drawTracker:B&&B.drawTrackerPoint},{setState:function(a){this.state=a}});\"\"});C(f,\"parts-more/BoxPlotSeries.js\",[f[\"parts/Globals.js\"],f[\"parts/Utilities.js\"]],function(f,a){var b=a.pick;a=a.seriesType;var e=f.noop,h=f.seriesTypes;a(\"boxplot\",\"column\",{threshold:null,tooltip:{pointFormat:'<span style=\"color:{point.color}\">\\u25cf</span> <b> {series.name}</b><br/>Maximum: {point.high}<br/>Upper quartile: {point.q3}<br/>Median: {point.median}<br/>Lower quartile: {point.q1}<br/>Minimum: {point.low}<br/>'},\nwhiskerLength:\"50%\",fillColor:\"#ffffff\",lineWidth:1,medianWidth:2,whiskerWidth:2},{pointArrayMap:[\"low\",\"q1\",\"median\",\"q3\",\"high\"],toYData:function(a){return[a.low,a.q1,a.median,a.q3,a.high]},pointValKey:\"high\",pointAttribs:function(){return{}},drawDataLabels:e,translate:function(){var a=this.yAxis,b=this.pointArrayMap;h.column.prototype.translate.apply(this);this.points.forEach(function(e){b.forEach(function(b){null!==e[b]&&(e[b+\"Plot\"]=a.translate(e[b],0,1,0,1))});e.plotHigh=e.highPlot})},drawPoints:function(){var a=\nthis,e=a.options,h=a.chart,f=h.renderer,z,c,l,w,p,y,v=0,m,n,d,g,k=!1!==a.doQuartiles,u,A=a.options.whiskerLength;a.points.forEach(function(r){var D=r.graphic,I=D?\"animate\":\"attr\",q=r.shapeArgs,G={},E={},F={},H={},t=r.color||a.color;\"undefined\"!==typeof r.plotY&&(m=Math.round(q.width),n=Math.floor(q.x),d=n+m,g=Math.round(m/2),z=Math.floor(k?r.q1Plot:r.lowPlot),c=Math.floor(k?r.q3Plot:r.lowPlot),l=Math.floor(r.highPlot),w=Math.floor(r.lowPlot),D||(r.graphic=D=f.g(\"point\").add(a.group),r.stem=f.path().addClass(\"highcharts-boxplot-stem\").add(D),\nA&&(r.whiskers=f.path().addClass(\"highcharts-boxplot-whisker\").add(D)),k&&(r.box=f.path(void 0).addClass(\"highcharts-boxplot-box\").add(D)),r.medianShape=f.path(void 0).addClass(\"highcharts-boxplot-median\").add(D)),h.styledMode||(E.stroke=r.stemColor||e.stemColor||t,E[\"stroke-width\"]=b(r.stemWidth,e.stemWidth,e.lineWidth),E.dashstyle=r.stemDashStyle||e.stemDashStyle||e.dashStyle,r.stem.attr(E),A&&(F.stroke=r.whiskerColor||e.whiskerColor||t,F[\"stroke-width\"]=b(r.whiskerWidth,e.whiskerWidth,e.lineWidth),\nF.dashstyle=r.whiskerDashStyle||e.whiskerDashStyle||e.dashStyle,r.whiskers.attr(F)),k&&(G.fill=r.fillColor||e.fillColor||t,G.stroke=e.lineColor||t,G[\"stroke-width\"]=e.lineWidth||0,G.dashstyle=r.boxDashStyle||e.boxDashStyle||e.dashStyle,r.box.attr(G)),H.stroke=r.medianColor||e.medianColor||t,H[\"stroke-width\"]=b(r.medianWidth,e.medianWidth,e.lineWidth),H.dashstyle=r.medianDashStyle||e.medianDashStyle||e.dashStyle,r.medianShape.attr(H)),y=r.stem.strokeWidth()%2/2,v=n+g+y,D=[[\"M\",v,c],[\"L\",v,l],[\"M\",\nv,z],[\"L\",v,w]],r.stem[I]({d:D}),k&&(y=r.box.strokeWidth()%2/2,z=Math.floor(z)+y,c=Math.floor(c)+y,n+=y,d+=y,D=[[\"M\",n,c],[\"L\",n,z],[\"L\",d,z],[\"L\",d,c],[\"L\",n,c],[\"Z\"]],r.box[I]({d:D})),A&&(y=r.whiskers.strokeWidth()%2/2,l+=y,w+=y,u=/%$/.test(A)?g*parseFloat(A)/100:A/2,D=[[\"M\",v-u,l],[\"L\",v+u,l],[\"M\",v-u,w],[\"L\",v+u,w]],r.whiskers[I]({d:D})),p=Math.round(r.medianPlot),y=r.medianShape.strokeWidth()%2/2,p+=y,D=[[\"M\",n,p],[\"L\",d,p]],r.medianShape[I]({d:D}))})},setStackedPoints:e});\"\"});C(f,\"parts-more/ErrorBarSeries.js\",\n[f[\"parts/Globals.js\"],f[\"parts/Utilities.js\"]],function(f,a){a=a.seriesType;var b=f.noop,e=f.seriesTypes;a(\"errorbar\",\"boxplot\",{color:\"#000000\",grouping:!1,linkedTo:\":previous\",tooltip:{pointFormat:'<span style=\"color:{point.color}\">\\u25cf</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'},whiskerWidth:null},{type:\"errorbar\",pointArrayMap:[\"low\",\"high\"],toYData:function(a){return[a.low,a.high]},pointValKey:\"high\",doQuartiles:!1,drawDataLabels:e.arearange?function(){var a=this.pointValKey;\ne.arearange.prototype.drawDataLabels.call(this);this.data.forEach(function(b){b.y=b[a]})}:b,getColumnMetrics:function(){return this.linkedParent&&this.linkedParent.columnMetrics||e.column.prototype.getColumnMetrics.call(this)}});\"\"});C(f,\"parts-more/WaterfallSeries.js\",[f[\"parts/Axis.js\"],f[\"parts/Chart.js\"],f[\"parts/Globals.js\"],f[\"parts/Point.js\"],f[\"parts/Stacking.js\"],f[\"parts/Utilities.js\"]],function(f,a,b,e,h,q){var t=q.addEvent,x=q.arrayMax,B=q.arrayMin,z=q.correctFloat,c=q.isNumber,l=q.objectEach,\nw=q.pick;q=q.seriesType;var p=b.Series,y=b.seriesTypes,v;(function(a){function c(){var d=this.waterfall.stacks;d&&(d.changed=!1,delete d.alreadyChanged)}function d(){var d=this.options.stackLabels;d&&d.enabled&&this.waterfall.stacks&&this.waterfall.renderStackTotals()}function g(){for(var d=this.axes,g=this.series,k=g.length;k--;)g[k].options.stacking&&(d.forEach(function(d){d.isXAxis||(d.waterfall.stacks.changed=!0)}),k=0)}function k(){this.waterfall||(this.waterfall=new u(this))}var u=function(){function d(d){this.axis=\nd;this.stacks={changed:!1}}d.prototype.renderStackTotals=function(){var d=this.axis,g=d.waterfall.stacks,k=d.stacking&&d.stacking.stackTotalGroup,a=new h(d,d.options.stackLabels,!1,0,void 0);this.dummyStackItem=a;l(g,function(d){l(d,function(d){a.total=d.stackTotal;d.label&&(a.label=d.label);h.prototype.render.call(a,k);d.label=a.label;delete a.label})});a.total=null};return d}();a.Composition=u;a.compose=function(a,r){t(a,\"init\",k);t(a,\"afterBuildStacks\",c);t(a,\"afterRender\",d);t(r,\"beforeRedraw\",\ng)}})(v||(v={}));q(\"waterfall\",\"column\",{dataLabels:{inside:!0},lineWidth:1,lineColor:\"#333333\",dashStyle:\"Dot\",borderColor:\"#333333\",states:{hover:{lineWidthPlus:0}}},{pointValKey:\"y\",showLine:!0,generatePoints:function(){var a;y.column.prototype.generatePoints.apply(this);var c=0;for(a=this.points.length;c<a;c++){var d=this.points[c];var g=this.processedYData[c];if(d.isIntermediateSum||d.isSum)d.y=z(g)}},translate:function(){var a=this.options,c=this.yAxis,d,g=w(a.minPointLength,5),k=g/2,u=a.threshold,\nA=a.stacking,r=c.waterfall.stacks[this.stackKey];y.column.prototype.translate.apply(this);var b=d=u;var e=this.points;var l=0;for(a=e.length;l<a;l++){var h=e[l];var f=this.processedYData[l];var p=h.shapeArgs;var q=[0,f];var v=h.y;if(A){if(r){q=r[l];if(\"overlap\"===A){var t=q.stackState[q.stateIndex--];t=0<=v?t:t-v;Object.hasOwnProperty.call(q,\"absolutePos\")&&delete q.absolutePos;Object.hasOwnProperty.call(q,\"absoluteNeg\")&&delete q.absoluteNeg}else 0<=v?(t=q.threshold+q.posTotal,q.posTotal-=v):(t=\nq.threshold+q.negTotal,q.negTotal-=v,t-=v),!q.posTotal&&Object.hasOwnProperty.call(q,\"absolutePos\")&&(q.posTotal=q.absolutePos,delete q.absolutePos),!q.negTotal&&Object.hasOwnProperty.call(q,\"absoluteNeg\")&&(q.negTotal=q.absoluteNeg,delete q.absoluteNeg);h.isSum||(q.connectorThreshold=q.threshold+q.stackTotal);c.reversed?(f=0<=v?t-v:t+v,v=t):(f=t,v=t-v);h.below=f<=w(u,0);p.y=c.translate(f,0,1,0,1);p.height=Math.abs(p.y-c.translate(v,0,1,0,1))}if(v=c.waterfall.dummyStackItem)v.x=l,v.label=r[l].label,\nv.setOffset(this.pointXOffset||0,this.barW||0,this.stackedYNeg[l],this.stackedYPos[l])}else t=Math.max(b,b+v)+q[0],p.y=c.translate(t,0,1,0,1),h.isSum?(p.y=c.translate(q[1],0,1,0,1),p.height=Math.min(c.translate(q[0],0,1,0,1),c.len)-p.y):h.isIntermediateSum?(0<=v?(f=q[1]+d,v=d):(f=d,v=q[1]+d),c.reversed&&(f^=v,v^=f,f^=v),p.y=c.translate(f,0,1,0,1),p.height=Math.abs(p.y-Math.min(c.translate(v,0,1,0,1),c.len)),d+=q[1]):(p.height=0<f?c.translate(b,0,1,0,1)-p.y:c.translate(b,0,1,0,1)-c.translate(b-f,0,\n1,0,1),b+=f,h.below=b<w(u,0)),0>p.height&&(p.y+=p.height,p.height*=-1);h.plotY=p.y=Math.round(p.y)-this.borderWidth%2/2;p.height=Math.max(Math.round(p.height),.001);h.yBottom=p.y+p.height;p.height<=g&&!h.isNull?(p.height=g,p.y-=k,h.plotY=p.y,h.minPointLengthOffset=0>h.y?-k:k):(h.isNull&&(p.width=0),h.minPointLengthOffset=0);p=h.plotY+(h.negative?p.height:0);this.chart.inverted?h.tooltipPos[0]=c.len-p:h.tooltipPos[1]=p}},processData:function(a){var c=this.options,d=this.yData,g=c.data,k=d.length,u=\nc.threshold||0,b,r,e,l,h;for(h=r=b=e=l=0;h<k;h++){var m=d[h];var f=g&&g[h]?g[h]:{};\"sum\"===m||f.isSum?d[h]=z(r):\"intermediateSum\"===m||f.isIntermediateSum?(d[h]=z(b),b=0):(r+=m,b+=m);e=Math.min(r,e);l=Math.max(r,l)}p.prototype.processData.call(this,a);c.stacking||(this.dataMin=e+u,this.dataMax=l)},toYData:function(c){return c.isSum?\"sum\":c.isIntermediateSum?\"intermediateSum\":c.y},updateParallelArrays:function(c,a){p.prototype.updateParallelArrays.call(this,c,a);if(\"sum\"===this.yData[0]||\"intermediateSum\"===\nthis.yData[0])this.yData[0]=null},pointAttribs:function(c,a){var d=this.options.upColor;d&&!c.options.color&&(c.color=0<c.y?d:null);c=y.column.prototype.pointAttribs.call(this,c,a);delete c.dashstyle;return c},getGraphPath:function(){return[[\"M\",0,0]]},getCrispPath:function(){var c=this.data,a=this.yAxis,d=c.length,g=Math.round(this.graph.strokeWidth())%2/2,k=Math.round(this.borderWidth)%2/2,u=this.xAxis.reversed,b=this.yAxis.reversed,r=this.options.stacking,e=[],h;for(h=1;h<d;h++){var l=c[h].shapeArgs;\nvar f=c[h-1];var p=c[h-1].shapeArgs;var q=a.waterfall.stacks[this.stackKey];var v=0<f.y?-p.height:0;q&&p&&l&&(q=q[h-1],r?(q=q.connectorThreshold,v=Math.round(a.translate(q,0,1,0,1)+(b?v:0))-g):v=p.y+f.minPointLengthOffset+k-g,e.push([\"M\",(p.x||0)+(u?0:p.width||0),v],[\"L\",(l.x||0)+(u?l.width||0:0),v]));!r&&e.length&&p&&(0>f.y&&!b||0<f.y&&b)&&(e[e.length-2][2]+=p.height,e[e.length-1][2]+=p.height)}return e},drawGraph:function(){p.prototype.drawGraph.call(this);this.graph.attr({d:this.getCrispPath()})},\nsetStackedPoints:function(){function c(d,g,k,c){if(B)for(k;k<B;k++)w.stackState[k]+=c;else w.stackState[0]=d,B=w.stackState.length;w.stackState.push(w.stackState[B-1]+g)}var a=this.options,d=this.yAxis.waterfall.stacks,g=a.threshold,k=g||0,u=k,b=this.stackKey,r=this.xData,e=r.length,h,l,f;this.yAxis.stacking.usePercentage=!1;var p=l=f=k;if(this.visible||!this.chart.options.chart.ignoreHiddenSeries){var q=d.changed;(h=d.alreadyChanged)&&0>h.indexOf(b)&&(q=!0);d[b]||(d[b]={});h=d[b];for(var v=0;v<e;v++){var t=\nr[v];if(!h[t]||q)h[t]={negTotal:0,posTotal:0,stackTotal:0,threshold:0,stateIndex:0,stackState:[],label:q&&h[t]?h[t].label:void 0};var w=h[t];var y=this.yData[v];0<=y?w.posTotal+=y:w.negTotal+=y;var z=a.data[v];t=w.absolutePos=w.posTotal;var x=w.absoluteNeg=w.negTotal;w.stackTotal=t+x;var B=w.stackState.length;z&&z.isIntermediateSum?(c(f,l,0,f),f=l,l=g,k^=u,u^=k,k^=u):z&&z.isSum?(c(g,p,B),k=g):(c(k,y,0,p),z&&(p+=y,l+=y));w.stateIndex++;w.threshold=k;k+=w.stackTotal}d.changed=!1;d.alreadyChanged||(d.alreadyChanged=\n[]);d.alreadyChanged.push(b)}},getExtremes:function(){var c=this.options.stacking;if(c){var a=this.yAxis;a=a.waterfall.stacks;var d=this.stackedYNeg=[];var g=this.stackedYPos=[];\"overlap\"===c?l(a[this.stackKey],function(k){d.push(B(k.stackState));g.push(x(k.stackState))}):l(a[this.stackKey],function(k){d.push(k.negTotal+k.threshold);g.push(k.posTotal+k.threshold)});return{dataMin:B(d),dataMax:x(g)}}return{dataMin:this.dataMin,dataMax:this.dataMax}}},{getClassName:function(){var c=e.prototype.getClassName.call(this);\nthis.isSum?c+=\" highcharts-sum\":this.isIntermediateSum&&(c+=\" highcharts-intermediate-sum\");return c},isValid:function(){return c(this.y)||this.isSum||!!this.isIntermediateSum}});\"\";v.compose(f,a);return v});C(f,\"parts-more/PolygonSeries.js\",[f[\"parts/Globals.js\"],f[\"mixins/legend-symbol.js\"],f[\"parts/Utilities.js\"]],function(f,a,b){b=b.seriesType;var e=f.Series,h=f.seriesTypes;b(\"polygon\",\"scatter\",{marker:{enabled:!1,states:{hover:{enabled:!1}}},stickyTracking:!1,tooltip:{followPointer:!0,pointFormat:\"\"},\ntrackByArea:!0},{type:\"polygon\",getGraphPath:function(){for(var a=e.prototype.getGraphPath.call(this),b=a.length+1;b--;)(b===a.length||\"M\"===a[b][0])&&0<b&&a.splice(b,0,[\"Z\"]);return this.areaPath=a},drawGraph:function(){this.options.fillColor=this.color;h.area.prototype.drawGraph.call(this)},drawLegendSymbol:a.drawRectangle,drawTracker:e.prototype.drawTracker,setStackedPoints:f.noop});\"\"});C(f,\"parts-more/BubbleLegend.js\",[f[\"parts/Chart.js\"],f[\"parts/Color.js\"],f[\"parts/Globals.js\"],f[\"parts/Legend.js\"],\nf[\"parts/Utilities.js\"]],function(f,a,b,e,h){var q=a.parse;a=h.addEvent;var t=h.arrayMax,x=h.arrayMin,B=h.isNumber,z=h.merge,c=h.objectEach,l=h.pick,w=h.setOptions,p=h.stableSort,y=h.wrap;\"\";var v=b.Series,m=b.noop;w({legend:{bubbleLegend:{borderColor:void 0,borderWidth:2,className:void 0,color:void 0,connectorClassName:void 0,connectorColor:void 0,connectorDistance:60,connectorWidth:1,enabled:!1,labels:{className:void 0,allowOverlap:!1,format:\"\",formatter:void 0,align:\"right\",style:{fontSize:10,\ncolor:void 0},x:0,y:0},maxSize:60,minSize:10,legendIndex:0,ranges:{value:void 0,borderColor:void 0,color:void 0,connectorColor:void 0},sizeBy:\"area\",sizeByAbsoluteValue:!1,zIndex:1,zThreshold:0}}});w=function(){function a(d,g){this.options=this.symbols=this.visible=this.ranges=this.movementX=this.maxLabel=this.legendSymbol=this.legendItemWidth=this.legendItemHeight=this.legendItem=this.legendGroup=this.legend=this.fontMetrics=this.chart=void 0;this.setState=m;this.init(d,g)}a.prototype.init=function(d,\ng){this.options=d;this.visible=!0;this.chart=g.chart;this.legend=g};a.prototype.addToLegend=function(d){d.splice(this.options.legendIndex,0,this)};a.prototype.drawLegendSymbol=function(d){var g=this.chart,k=this.options,a=l(d.options.itemDistance,20),c=k.ranges;var r=k.connectorDistance;this.fontMetrics=g.renderer.fontMetrics(k.labels.style.fontSize.toString()+\"px\");c&&c.length&&B(c[0].value)?(p(c,function(d,g){return g.value-d.value}),this.ranges=c,this.setOptions(),this.render(),g=this.getMaxLabelSize(),\nc=this.ranges[0].radius,d=2*c,r=r-c+g.width,r=0<r?r:0,this.maxLabel=g,this.movementX=\"left\"===k.labels.align?r:0,this.legendItemWidth=d+r+a,this.legendItemHeight=d+this.fontMetrics.h/2):d.options.bubbleLegend.autoRanges=!0};a.prototype.setOptions=function(){var d=this.ranges,g=this.options,k=this.chart.series[g.seriesIndex],c=this.legend.baseline,a={\"z-index\":g.zIndex,\"stroke-width\":g.borderWidth},r={\"z-index\":g.zIndex,\"stroke-width\":g.connectorWidth},b=this.getLabelStyles(),e=k.options.marker.fillOpacity,\nh=this.chart.styledMode;d.forEach(function(u,A){h||(a.stroke=l(u.borderColor,g.borderColor,k.color),a.fill=l(u.color,g.color,1!==e?q(k.color).setOpacity(e).get(\"rgba\"):k.color),r.stroke=l(u.connectorColor,g.connectorColor,k.color));d[A].radius=this.getRangeRadius(u.value);d[A]=z(d[A],{center:d[0].radius-d[A].radius+c});h||z(!0,d[A],{bubbleStyle:z(!1,a),connectorStyle:z(!1,r),labelStyle:b})},this)};a.prototype.getLabelStyles=function(){var d=this.options,g={},k=\"left\"===d.labels.align,a=this.legend.options.rtl;\nc(d.labels.style,function(d,k){\"color\"!==k&&\"fontSize\"!==k&&\"z-index\"!==k&&(g[k]=d)});return z(!1,g,{\"font-size\":d.labels.style.fontSize,fill:l(d.labels.style.color,\"#000000\"),\"z-index\":d.zIndex,align:a||k?\"right\":\"left\"})};a.prototype.getRangeRadius=function(d){var g=this.options;return this.chart.series[this.options.seriesIndex].getRadius.call(this,g.ranges[g.ranges.length-1].value,g.ranges[0].value,g.minSize,g.maxSize,d)};a.prototype.render=function(){var d=this.chart.renderer,g=this.options.zThreshold;\nthis.symbols||(this.symbols={connectors:[],bubbleItems:[],labels:[]});this.legendSymbol=d.g(\"bubble-legend\");this.legendItem=d.g(\"bubble-legend-item\");this.legendSymbol.translateX=0;this.legendSymbol.translateY=0;this.ranges.forEach(function(d){d.value>=g&&this.renderRange(d)},this);this.legendSymbol.add(this.legendItem);this.legendItem.add(this.legendGroup);this.hideOverlappingLabels()};a.prototype.renderRange=function(d){var g=this.options,k=g.labels,a=this.chart.renderer,c=this.symbols,r=c.labels,\nb=d.center,e=Math.abs(d.radius),h=g.connectorDistance||0,l=k.align,n=k.style.fontSize;h=this.legend.options.rtl||\"left\"===l?-h:h;k=g.connectorWidth;var f=this.ranges[0].radius||0,p=b-e-g.borderWidth/2+k/2;n=n/2-(this.fontMetrics.h-n)/2;var m=a.styledMode;\"center\"===l&&(h=0,g.connectorDistance=0,d.labelStyle.align=\"center\");l=p+g.labels.y;var q=f+h+g.labels.x;c.bubbleItems.push(a.circle(f,b+((p%1?1:.5)-(k%2?0:.5)),e).attr(m?{}:d.bubbleStyle).addClass((m?\"highcharts-color-\"+this.options.seriesIndex+\n\" \":\"\")+\"highcharts-bubble-legend-symbol \"+(g.className||\"\")).add(this.legendSymbol));c.connectors.push(a.path(a.crispLine([[\"M\",f,p],[\"L\",f+h,p]],g.connectorWidth)).attr(m?{}:d.connectorStyle).addClass((m?\"highcharts-color-\"+this.options.seriesIndex+\" \":\"\")+\"highcharts-bubble-legend-connectors \"+(g.connectorClassName||\"\")).add(this.legendSymbol));d=a.text(this.formatLabel(d),q,l+n).attr(m?{}:d.labelStyle).addClass(\"highcharts-bubble-legend-labels \"+(g.labels.className||\"\")).add(this.legendSymbol);\nr.push(d);d.placed=!0;d.alignAttr={x:q,y:l+n}};a.prototype.getMaxLabelSize=function(){var d,g;this.symbols.labels.forEach(function(k){g=k.getBBox(!0);d=d?g.width>d.width?g:d:g});return d||{}};a.prototype.formatLabel=function(d){var g=this.options,k=g.labels.formatter;g=g.labels.format;var a=this.chart.numberFormatter;return g?h.format(g,d):k?k.call(d):a(d.value,1)};a.prototype.hideOverlappingLabels=function(){var d=this.chart,g=this.symbols;!this.options.labels.allowOverlap&&g&&(d.hideOverlappingLabels(g.labels),\ng.labels.forEach(function(d,a){d.newOpacity?d.newOpacity!==d.oldOpacity&&g.connectors[a].show():g.connectors[a].hide()}))};a.prototype.getRanges=function(){var d=this.legend.bubbleLegend,g=d.options.ranges,k,a=Number.MAX_VALUE,c=-Number.MAX_VALUE;d.chart.series.forEach(function(d){d.isBubble&&!d.ignoreSeries&&(k=d.zData.filter(B),k.length&&(a=l(d.options.zMin,Math.min(a,Math.max(x(k),!1===d.options.displayNegative?d.options.zThreshold:-Number.MAX_VALUE))),c=l(d.options.zMax,Math.max(c,t(k)))))});\nvar b=a===c?[{value:c}]:[{value:a},{value:(a+c)/2},{value:c,autoRanges:!0}];g.length&&g[0].radius&&b.reverse();b.forEach(function(d,k){g&&g[k]&&(b[k]=z(!1,g[k],d))});return b};a.prototype.predictBubbleSizes=function(){var d=this.chart,g=this.fontMetrics,k=d.legend.options,a=\"horizontal\"===k.layout,c=a?d.legend.lastLineHeight:0,b=d.plotSizeX,e=d.plotSizeY,h=d.series[this.options.seriesIndex];d=Math.ceil(h.minPxSize);var l=Math.ceil(h.maxPxSize);h=h.options.maxSize;var n=Math.min(e,b);if(k.floating||\n!/%$/.test(h))g=l;else if(h=parseFloat(h),g=(n+c-g.h/2)*h/100/(h/100+1),a&&e-g>=b||!a&&b-g>=e)g=l;return[d,Math.ceil(g)]};a.prototype.updateRanges=function(d,g){var k=this.legend.options.bubbleLegend;k.minSize=d;k.maxSize=g;k.ranges=this.getRanges()};a.prototype.correctSizes=function(){var d=this.legend,g=this.chart.series[this.options.seriesIndex];1<Math.abs(Math.ceil(g.maxPxSize)-this.options.maxSize)&&(this.updateRanges(this.options.minSize,g.maxPxSize),d.render())};return a}();a(e,\"afterGetAllItems\",\nfunction(a){var d=this.bubbleLegend,g=this.options,k=g.bubbleLegend,c=this.chart.getVisibleBubbleSeriesIndex();d&&d.ranges&&d.ranges.length&&(k.ranges.length&&(k.autoRanges=!!k.ranges[0].autoRanges),this.destroyItem(d));0<=c&&g.enabled&&k.enabled&&(k.seriesIndex=c,this.bubbleLegend=new b.BubbleLegend(k,this),this.bubbleLegend.addToLegend(a.allItems))});f.prototype.getVisibleBubbleSeriesIndex=function(){for(var a=this.series,d=0;d<a.length;){if(a[d]&&a[d].isBubble&&a[d].visible&&a[d].zData.length)return d;\nd++}return-1};e.prototype.getLinesHeights=function(){var a=this.allItems,d=[],g=a.length,k,c=0;for(k=0;k<g;k++)if(a[k].legendItemHeight&&(a[k].itemHeight=a[k].legendItemHeight),a[k]===a[g-1]||a[k+1]&&a[k]._legendItemPos[1]!==a[k+1]._legendItemPos[1]){d.push({height:0});var b=d[d.length-1];for(c;c<=k;c++)a[c].itemHeight>b.height&&(b.height=a[c].itemHeight);b.step=k}return d};e.prototype.retranslateItems=function(a){var d,g,k,c=this.options.rtl,b=0;this.allItems.forEach(function(r,e){d=r.legendGroup.translateX;\ng=r._legendItemPos[1];if((k=r.movementX)||c&&r.ranges)k=c?d-r.options.maxSize/2:d+k,r.legendGroup.attr({translateX:k});e>a[b].step&&b++;r.legendGroup.attr({translateY:Math.round(g+a[b].height/2)});r._legendItemPos[1]=g+a[b].height/2})};a(v,\"legendItemClick\",function(){var a=this.chart,d=this.visible,g=this.chart.legend;g&&g.bubbleLegend&&(this.visible=!d,this.ignoreSeries=d,a=0<=a.getVisibleBubbleSeriesIndex(),g.bubbleLegend.visible!==a&&(g.update({bubbleLegend:{enabled:a}}),g.bubbleLegend.visible=\na),this.visible=d)});y(f.prototype,\"drawChartBox\",function(a,d,g){var k=this.legend,b=0<=this.getVisibleBubbleSeriesIndex();if(k&&k.options.enabled&&k.bubbleLegend&&k.options.bubbleLegend.autoRanges&&b){var e=k.bubbleLegend.options;b=k.bubbleLegend.predictBubbleSizes();k.bubbleLegend.updateRanges(b[0],b[1]);e.placed||(k.group.placed=!1,k.allItems.forEach(function(d){d.legendGroup.translateY=null}));k.render();this.getMargins();this.axes.forEach(function(d){d.visible&&d.render();e.placed||(d.setScale(),\nd.updateNames(),c(d.ticks,function(d){d.isNew=!0;d.isNewLabel=!0}))});e.placed=!0;this.getMargins();a.call(this,d,g);k.bubbleLegend.correctSizes();k.retranslateItems(k.getLinesHeights())}else a.call(this,d,g),k&&k.options.enabled&&k.bubbleLegend&&(k.render(),k.retranslateItems(k.getLinesHeights()))});b.BubbleLegend=w;return b.BubbleLegend});C(f,\"parts-more/BubbleSeries.js\",[f[\"parts/Globals.js\"],f[\"parts/Color.js\"],f[\"parts/Point.js\"],f[\"parts/Utilities.js\"]],function(f,a,b,e){var h=a.parse,q=e.arrayMax,\nt=e.arrayMin,x=e.clamp,B=e.extend,z=e.isNumber,c=e.pick,l=e.pInt;a=e.seriesType;e=f.Axis;var w=f.noop,p=f.Series,y=f.seriesTypes;a(\"bubble\",\"scatter\",{dataLabels:{formatter:function(){return this.point.z},inside:!0,verticalAlign:\"middle\"},animationLimit:250,marker:{lineColor:null,lineWidth:1,fillOpacity:.5,radius:null,states:{hover:{radiusPlus:0}},symbol:\"circle\"},minSize:8,maxSize:\"20%\",softThreshold:!1,states:{hover:{halo:{size:5}}},tooltip:{pointFormat:\"({point.x}, {point.y}), Size: {point.z}\"},\nturboThreshold:0,zThreshold:0,zoneAxis:\"z\"},{pointArrayMap:[\"y\",\"z\"],parallelArrays:[\"x\",\"y\",\"z\"],trackerGroups:[\"group\",\"dataLabelsGroup\"],specialGroup:\"group\",bubblePadding:!0,zoneAxis:\"z\",directTouch:!0,isBubble:!0,pointAttribs:function(a,c){var b=this.options.marker.fillOpacity;a=p.prototype.pointAttribs.call(this,a,c);1!==b&&(a.fill=h(a.fill).setOpacity(b).get(\"rgba\"));return a},getRadii:function(a,c,b){var d=this.zData,g=this.yData,k=b.minPxSize,e=b.maxPxSize,h=[];var r=0;for(b=d.length;r<b;r++){var l=\nd[r];h.push(this.getRadius(a,c,k,e,l,g[r]))}this.radii=h},getRadius:function(a,c,b,d,g,k){var e=this.options,h=\"width\"!==e.sizeBy,r=e.zThreshold,l=c-a,f=.5;if(null===k||null===g)return null;if(z(g)){e.sizeByAbsoluteValue&&(g=Math.abs(g-r),l=Math.max(c-r,Math.abs(a-r)),a=0);if(g<a)return b/2-1;0<l&&(f=(g-a)/l)}h&&0<=f&&(f=Math.sqrt(f));return Math.ceil(b+f*(d-b))/2},animate:function(a){!a&&this.points.length<this.options.animationLimit&&this.points.forEach(function(a){var c=a.graphic;c&&c.width&&(this.hasRendered||\nc.attr({x:a.plotX,y:a.plotY,width:1,height:1}),c.animate(this.markerAttribs(a),this.options.animation))},this)},hasData:function(){return!!this.processedXData.length},translate:function(){var a,c=this.data,b=this.radii;y.scatter.prototype.translate.call(this);for(a=c.length;a--;){var d=c[a];var g=b?b[a]:0;z(g)&&g>=this.minPxSize/2?(d.marker=B(d.marker,{radius:g,width:2*g,height:2*g}),d.dlBox={x:d.plotX-g,y:d.plotY-g,width:2*g,height:2*g}):d.shapeArgs=d.plotY=d.dlBox=void 0}},alignDataLabel:y.column.prototype.alignDataLabel,\nbuildKDTree:w,applyZones:w},{haloPath:function(a){return b.prototype.haloPath.call(this,0===a?0:(this.marker?this.marker.radius||0:0)+a)},ttBelow:!1});e.prototype.beforePadding=function(){var a=this,b=this.len,e=this.chart,d=0,g=b,k=this.isXAxis,h=k?\"xData\":\"yData\",f=this.min,r={},p=Math.min(e.plotWidth,e.plotHeight),w=Number.MAX_VALUE,y=-Number.MAX_VALUE,B=this.max-f,E=b/B,F=[];this.series.forEach(function(d){var g=d.options;!d.bubblePadding||!d.visible&&e.options.chart.ignoreHiddenSeries||(a.allowZoomOutside=\n!0,F.push(d),k&&([\"minSize\",\"maxSize\"].forEach(function(d){var a=g[d],c=/%$/.test(a);a=l(a);r[d]=c?p*a/100:a}),d.minPxSize=r.minSize,d.maxPxSize=Math.max(r.maxSize,r.minSize),d=d.zData.filter(z),d.length&&(w=c(g.zMin,x(t(d),!1===g.displayNegative?g.zThreshold:-Number.MAX_VALUE,w)),y=c(g.zMax,Math.max(y,q(d))))))});F.forEach(function(c){var b=c[h],e=b.length;k&&c.getRadii(w,y,c);if(0<B)for(;e--;)if(z(b[e])&&a.dataMin<=b[e]&&b[e]<=a.max){var r=c.radii?c.radii[e]:0;d=Math.min((b[e]-f)*E-r,d);g=Math.max((b[e]-\nf)*E+r,g)}});F.length&&0<B&&!this.logarithmic&&(g-=b,E*=(b+Math.max(0,d)-Math.min(g,b))/b,[[\"min\",\"userMin\",d],[\"max\",\"userMax\",g]].forEach(function(d){\"undefined\"===typeof c(a.options[d[0]],a[d[1]])&&(a[d[0]]+=d[2]/E)}))};\"\"});C(f,\"modules/networkgraph/integrations.js\",[f[\"parts/Globals.js\"]],function(f){f.networkgraphIntegrations={verlet:{attractiveForceFunction:function(a,b){return(b-a)/a},repulsiveForceFunction:function(a,b){return(b-a)/a*(b>a?1:0)},barycenter:function(){var a=this.options.gravitationalConstant,\nb=this.barycenter.xFactor,e=this.barycenter.yFactor;b=(b-(this.box.left+this.box.width)/2)*a;e=(e-(this.box.top+this.box.height)/2)*a;this.nodes.forEach(function(a){a.fixedPosition||(a.plotX-=b/a.mass/a.degree,a.plotY-=e/a.mass/a.degree)})},repulsive:function(a,b,e){b=b*this.diffTemperature/a.mass/a.degree;a.fixedPosition||(a.plotX+=e.x*b,a.plotY+=e.y*b)},attractive:function(a,b,e){var h=a.getMass(),f=-e.x*b*this.diffTemperature;b=-e.y*b*this.diffTemperature;a.fromNode.fixedPosition||(a.fromNode.plotX-=\nf*h.fromNode/a.fromNode.degree,a.fromNode.plotY-=b*h.fromNode/a.fromNode.degree);a.toNode.fixedPosition||(a.toNode.plotX+=f*h.toNode/a.toNode.degree,a.toNode.plotY+=b*h.toNode/a.toNode.degree)},integrate:function(a,b){var e=-a.options.friction,h=a.options.maxSpeed,f=(b.plotX+b.dispX-b.prevX)*e;e*=b.plotY+b.dispY-b.prevY;var t=Math.abs,x=t(f)/(f||1);t=t(e)/(e||1);f=x*Math.min(h,Math.abs(f));e=t*Math.min(h,Math.abs(e));b.prevX=b.plotX+b.dispX;b.prevY=b.plotY+b.dispY;b.plotX+=f;b.plotY+=e;b.temperature=\na.vectorLength({x:f,y:e})},getK:function(a){return Math.pow(a.box.width*a.box.height/a.nodes.length,.5)}},euler:{attractiveForceFunction:function(a,b){return a*a/b},repulsiveForceFunction:function(a,b){return b*b/a},barycenter:function(){var a=this.options.gravitationalConstant,b=this.barycenter.xFactor,e=this.barycenter.yFactor;this.nodes.forEach(function(h){if(!h.fixedPosition){var f=h.getDegree();f*=1+f/2;h.dispX+=(b-h.plotX)*a*f/h.degree;h.dispY+=(e-h.plotY)*a*f/h.degree}})},repulsive:function(a,\nb,e,h){a.dispX+=e.x/h*b/a.degree;a.dispY+=e.y/h*b/a.degree},attractive:function(a,b,e,h){var f=a.getMass(),t=e.x/h*b;b*=e.y/h;a.fromNode.fixedPosition||(a.fromNode.dispX-=t*f.fromNode/a.fromNode.degree,a.fromNode.dispY-=b*f.fromNode/a.fromNode.degree);a.toNode.fixedPosition||(a.toNode.dispX+=t*f.toNode/a.toNode.degree,a.toNode.dispY+=b*f.toNode/a.toNode.degree)},integrate:function(a,b){b.dispX+=b.dispX*a.options.friction;b.dispY+=b.dispY*a.options.friction;var e=b.temperature=a.vectorLength({x:b.dispX,\ny:b.dispY});0!==e&&(b.plotX+=b.dispX/e*Math.min(Math.abs(b.dispX),a.temperature),b.plotY+=b.dispY/e*Math.min(Math.abs(b.dispY),a.temperature))},getK:function(a){return Math.pow(a.box.width*a.box.height/a.nodes.length,.3)}}}});C(f,\"modules/networkgraph/QuadTree.js\",[f[\"parts/Globals.js\"],f[\"parts/Utilities.js\"]],function(f,a){a=a.extend;var b=f.QuadTreeNode=function(a){this.box=a;this.boxSize=Math.min(a.width,a.height);this.nodes=[];this.body=this.isInternal=!1;this.isEmpty=!0};a(b.prototype,{insert:function(a,\nh){this.isInternal?this.nodes[this.getBoxPosition(a)].insert(a,h-1):(this.isEmpty=!1,this.body?h?(this.isInternal=!0,this.divideBox(),!0!==this.body&&(this.nodes[this.getBoxPosition(this.body)].insert(this.body,h-1),this.body=!0),this.nodes[this.getBoxPosition(a)].insert(a,h-1)):(h=new b({top:a.plotX,left:a.plotY,width:.1,height:.1}),h.body=a,h.isInternal=!1,this.nodes.push(h)):(this.isInternal=!1,this.body=a))},updateMassAndCenter:function(){var a=0,b=0,f=0;this.isInternal?(this.nodes.forEach(function(e){e.isEmpty||\n(a+=e.mass,b+=e.plotX*e.mass,f+=e.plotY*e.mass)}),b/=a,f/=a):this.body&&(a=this.body.mass,b=this.body.plotX,f=this.body.plotY);this.mass=a;this.plotX=b;this.plotY=f},divideBox:function(){var a=this.box.width/2,h=this.box.height/2;this.nodes[0]=new b({left:this.box.left,top:this.box.top,width:a,height:h});this.nodes[1]=new b({left:this.box.left+a,top:this.box.top,width:a,height:h});this.nodes[2]=new b({left:this.box.left+a,top:this.box.top+h,width:a,height:h});this.nodes[3]=new b({left:this.box.left,\ntop:this.box.top+h,width:a,height:h})},getBoxPosition:function(a){var b=a.plotY<this.box.top+this.box.height/2;return a.plotX<this.box.left+this.box.width/2?b?0:3:b?1:2}});f=f.QuadTree=function(a,h,f,t){this.box={left:a,top:h,width:f,height:t};this.maxDepth=25;this.root=new b(this.box,\"0\");this.root.isInternal=!0;this.root.isRoot=!0;this.root.divideBox()};a(f.prototype,{insertNodes:function(a){a.forEach(function(a){this.root.insert(a,this.maxDepth)},this)},visitNodeRecursive:function(a,b,f){var e;\na||(a=this.root);a===this.root&&b&&(e=b(a));!1!==e&&(a.nodes.forEach(function(a){if(a.isInternal){b&&(e=b(a));if(!1===e)return;this.visitNodeRecursive(a,b,f)}else a.body&&b&&b(a.body);f&&f(a)},this),a===this.root&&f&&f(a))},calculateMassAndCenter:function(){this.visitNodeRecursive(null,null,function(a){a.updateMassAndCenter()})}})});C(f,\"modules/networkgraph/layouts.js\",[f[\"parts/Chart.js\"],f[\"parts/Globals.js\"],f[\"parts/Utilities.js\"]],function(f,a,b){var e=b.addEvent,h=b.clamp,q=b.defined,t=b.extend,\nx=b.isFunction,B=b.pick,z=b.setAnimation;a.layouts={\"reingold-fruchterman\":function(){}};t(a.layouts[\"reingold-fruchterman\"].prototype,{init:function(c){this.options=c;this.nodes=[];this.links=[];this.series=[];this.box={x:0,y:0,width:0,height:0};this.setInitialRendering(!0);this.integration=a.networkgraphIntegrations[c.integration];this.enableSimulation=c.enableSimulation;this.attractiveForce=B(c.attractiveForce,this.integration.attractiveForceFunction);this.repulsiveForce=B(c.repulsiveForce,this.integration.repulsiveForceFunction);\nthis.approximation=c.approximation},updateSimulation:function(a){this.enableSimulation=B(a,this.options.enableSimulation)},start:function(){var a=this.series,b=this.options;this.currentStep=0;this.forces=a[0]&&a[0].forces||[];this.chart=a[0]&&a[0].chart;this.initialRendering&&(this.initPositions(),a.forEach(function(a){a.finishedAnimating=!0;a.render()}));this.setK();this.resetSimulation(b);this.enableSimulation&&this.step()},step:function(){var c=this,b=this.series;c.currentStep++;\"barnes-hut\"===\nc.approximation&&(c.createQuadTree(),c.quadTree.calculateMassAndCenter());c.forces.forEach(function(a){c[a+\"Forces\"](c.temperature)});c.applyLimits(c.temperature);c.temperature=c.coolDown(c.startTemperature,c.diffTemperature,c.currentStep);c.prevSystemTemperature=c.systemTemperature;c.systemTemperature=c.getSystemTemperature();c.enableSimulation&&(b.forEach(function(a){a.chart&&a.render()}),c.maxIterations--&&isFinite(c.temperature)&&!c.isStable()?(c.simulation&&a.win.cancelAnimationFrame(c.simulation),\nc.simulation=a.win.requestAnimationFrame(function(){c.step()})):c.simulation=!1)},stop:function(){this.simulation&&a.win.cancelAnimationFrame(this.simulation)},setArea:function(a,b,e,f){this.box={left:a,top:b,width:e,height:f}},setK:function(){this.k=this.options.linkLength||this.integration.getK(this)},addElementsToCollection:function(a,b){a.forEach(function(a){-1===b.indexOf(a)&&b.push(a)})},removeElementFromCollection:function(a,b){a=b.indexOf(a);-1!==a&&b.splice(a,1)},clear:function(){this.nodes.length=\n0;this.links.length=0;this.series.length=0;this.resetSimulation()},resetSimulation:function(){this.forcedStop=!1;this.systemTemperature=0;this.setMaxIterations();this.setTemperature();this.setDiffTemperature()},restartSimulation:function(){this.simulation?this.resetSimulation():(this.setInitialRendering(!1),this.enableSimulation?this.start():this.setMaxIterations(1),this.chart&&this.chart.redraw(),this.setInitialRendering(!0))},setMaxIterations:function(a){this.maxIterations=B(a,this.options.maxIterations)},\nsetTemperature:function(){this.temperature=this.startTemperature=Math.sqrt(this.nodes.length)},setDiffTemperature:function(){this.diffTemperature=this.startTemperature/(this.options.maxIterations+1)},setInitialRendering:function(a){this.initialRendering=a},createQuadTree:function(){this.quadTree=new a.QuadTree(this.box.left,this.box.top,this.box.width,this.box.height);this.quadTree.insertNodes(this.nodes)},initPositions:function(){var a=this.options.initialPositions;x(a)?(a.call(this),this.nodes.forEach(function(a){q(a.prevX)||\n(a.prevX=a.plotX);q(a.prevY)||(a.prevY=a.plotY);a.dispX=0;a.dispY=0})):\"circle\"===a?this.setCircularPositions():this.setRandomPositions()},setCircularPositions:function(){function a(d){d.linksFrom.forEach(function(d){m[d.toNode.id]||(m[d.toNode.id]=!0,q.push(d.toNode),a(d.toNode))})}var b=this.box,e=this.nodes,f=2*Math.PI/(e.length+1),h=e.filter(function(a){return 0===a.linksTo.length}),q=[],m={},n=this.options.initialPositionRadius;h.forEach(function(d){q.push(d);a(d)});q.length?e.forEach(function(a){-1===\nq.indexOf(a)&&q.push(a)}):q=e;q.forEach(function(a,g){a.plotX=a.prevX=B(a.plotX,b.width/2+n*Math.cos(g*f));a.plotY=a.prevY=B(a.plotY,b.height/2+n*Math.sin(g*f));a.dispX=0;a.dispY=0})},setRandomPositions:function(){function a(a){a=a*a/Math.PI;return a-=Math.floor(a)}var b=this.box,e=this.nodes,f=e.length+1;e.forEach(function(c,e){c.plotX=c.prevX=B(c.plotX,b.width*a(e));c.plotY=c.prevY=B(c.plotY,b.height*a(f+e));c.dispX=0;c.dispY=0})},force:function(a){this.integration[a].apply(this,Array.prototype.slice.call(arguments,\n1))},barycenterForces:function(){this.getBarycenter();this.force(\"barycenter\")},getBarycenter:function(){var a=0,b=0,e=0;this.nodes.forEach(function(c){b+=c.plotX*c.mass;e+=c.plotY*c.mass;a+=c.mass});return this.barycenter={x:b,y:e,xFactor:b/a,yFactor:e/a}},barnesHutApproximation:function(a,b){var c=this.getDistXY(a,b),e=this.vectorLength(c);if(a!==b&&0!==e)if(b.isInternal)if(b.boxSize/e<this.options.theta&&0!==e){var f=this.repulsiveForce(e,this.k);this.force(\"repulsive\",a,f*b.mass,c,e);var h=!1}else h=\n!0;else f=this.repulsiveForce(e,this.k),this.force(\"repulsive\",a,f*b.mass,c,e);return h},repulsiveForces:function(){var a=this;\"barnes-hut\"===a.approximation?a.nodes.forEach(function(c){a.quadTree.visitNodeRecursive(null,function(b){return a.barnesHutApproximation(c,b)})}):a.nodes.forEach(function(c){a.nodes.forEach(function(b){if(c!==b&&!c.fixedPosition){var e=a.getDistXY(c,b);var f=a.vectorLength(e);if(0!==f){var h=a.repulsiveForce(f,a.k);a.force(\"repulsive\",c,h*b.mass,e,f)}}})})},attractiveForces:function(){var a=\nthis,b,e,f;a.links.forEach(function(c){c.fromNode&&c.toNode&&(b=a.getDistXY(c.fromNode,c.toNode),e=a.vectorLength(b),0!==e&&(f=a.attractiveForce(e,a.k),a.force(\"attractive\",c,f,b,e)))})},applyLimits:function(){var a=this;a.nodes.forEach(function(c){c.fixedPosition||(a.integration.integrate(a,c),a.applyLimitBox(c,a.box),c.dispX=0,c.dispY=0)})},applyLimitBox:function(a,b){var c=a.radius;a.plotX=h(a.plotX,b.left+c,b.width-c);a.plotY=h(a.plotY,b.top+c,b.height-c)},coolDown:function(a,b,e){return a-b*\ne},isStable:function(){return.00001>Math.abs(this.systemTemperature-this.prevSystemTemperature)||0>=this.temperature},getSystemTemperature:function(){return this.nodes.reduce(function(a,b){return a+b.temperature},0)},vectorLength:function(a){return Math.sqrt(a.x*a.x+a.y*a.y)},getDistR:function(a,b){a=this.getDistXY(a,b);return this.vectorLength(a)},getDistXY:function(a,b){var c=a.plotX-b.plotX;a=a.plotY-b.plotY;return{x:c,y:a,absX:Math.abs(c),absY:Math.abs(a)}}});e(f,\"predraw\",function(){this.graphLayoutsLookup&&\nthis.graphLayoutsLookup.forEach(function(a){a.stop()})});e(f,\"render\",function(){function a(a){a.maxIterations--&&isFinite(a.temperature)&&!a.isStable()&&!a.enableSimulation&&(a.beforeStep&&a.beforeStep(),a.step(),e=!1,b=!0)}var b=!1;if(this.graphLayoutsLookup){z(!1,this);for(this.graphLayoutsLookup.forEach(function(a){a.start()});!e;){var e=!0;this.graphLayoutsLookup.forEach(a)}b&&this.series.forEach(function(a){a&&a.layout&&a.render()})}});e(f,\"beforePrint\",function(){this.graphLayoutsLookup&&(this.graphLayoutsLookup.forEach(function(a){a.updateSimulation(!1)}),\nthis.redraw())});e(f,\"afterPrint\",function(){this.graphLayoutsLookup&&this.graphLayoutsLookup.forEach(function(a){a.updateSimulation()});this.redraw()})});C(f,\"modules/networkgraph/draggable-nodes.js\",[f[\"parts/Chart.js\"],f[\"parts/Globals.js\"],f[\"parts/Utilities.js\"]],function(f,a,b){var e=b.addEvent;a.dragNodesMixin={onMouseDown:function(a,b){b=this.chart.pointer.normalize(b);a.fixedPosition={chartX:b.chartX,chartY:b.chartY,plotX:a.plotX,plotY:a.plotY};a.inDragMode=!0},onMouseMove:function(a,b){if(a.fixedPosition&&\na.inDragMode){var e=this.chart;b=e.pointer.normalize(b);var f=a.fixedPosition.chartX-b.chartX,h=a.fixedPosition.chartY-b.chartY;b=e.graphLayoutsLookup;if(5<Math.abs(f)||5<Math.abs(h))f=a.fixedPosition.plotX-f,h=a.fixedPosition.plotY-h,e.isInsidePlot(f,h)&&(a.plotX=f,a.plotY=h,a.hasDragged=!0,this.redrawHalo(a),b.forEach(function(a){a.restartSimulation()}))}},onMouseUp:function(a,b){a.fixedPosition&&a.hasDragged&&(this.layout.enableSimulation?this.layout.start():this.chart.redraw(),a.inDragMode=a.hasDragged=\n!1,this.options.fixedDraggable||delete a.fixedPosition)},redrawHalo:function(a){a&&this.halo&&this.halo.attr({d:a.haloPath(this.options.states.hover.halo.size)})}};e(f,\"load\",function(){var a=this,b,f,x;a.container&&(b=e(a.container,\"mousedown\",function(b){var h=a.hoverPoint;h&&h.series&&h.series.hasDraggableNodes&&h.series.options.draggable&&(h.series.onMouseDown(h,b),f=e(a.container,\"mousemove\",function(a){return h&&h.series&&h.series.onMouseMove(h,a)}),x=e(a.container.ownerDocument,\"mouseup\",function(a){f();\nx();return h&&h.series&&h.series.onMouseUp(h,a)}))}));e(a,\"destroy\",function(){b()})})});C(f,\"parts-more/PackedBubbleSeries.js\",[f[\"parts/Chart.js\"],f[\"parts/Color.js\"],f[\"parts/Globals.js\"],f[\"parts/Point.js\"],f[\"parts/Utilities.js\"]],function(f,a,b,e,h){var q=a.parse,t=h.addEvent,x=h.clamp,B=h.defined,z=h.extend;a=h.extendClass;var c=h.fireEvent,l=h.isArray,w=h.isNumber,p=h.merge,y=h.pick;h=h.seriesType;var v=b.Series,m=b.layouts[\"reingold-fruchterman\"],n=b.dragNodesMixin;f.prototype.getSelectedParentNodes=\nfunction(){var a=[];this.series.forEach(function(d){d.parentNode&&d.parentNode.selected&&a.push(d.parentNode)});return a};b.networkgraphIntegrations.packedbubble={repulsiveForceFunction:function(a,g,b,c){return Math.min(a,(b.marker.radius+c.marker.radius)/2)},barycenter:function(){var a=this,g=a.options.gravitationalConstant,b=a.box,c=a.nodes,e,f;c.forEach(function(d){a.options.splitSeries&&!d.isParentNode?(e=d.series.parentNode.plotX,f=d.series.parentNode.plotY):(e=b.width/2,f=b.height/2);d.fixedPosition||\n(d.plotX-=(d.plotX-e)*g/(d.mass*Math.sqrt(c.length)),d.plotY-=(d.plotY-f)*g/(d.mass*Math.sqrt(c.length)))})},repulsive:function(a,g,b,c){var d=g*this.diffTemperature/a.mass/a.degree;g=b.x*d;b=b.y*d;a.fixedPosition||(a.plotX+=g,a.plotY+=b);c.fixedPosition||(c.plotX-=g,c.plotY-=b)},integrate:b.networkgraphIntegrations.verlet.integrate,getK:b.noop};b.layouts.packedbubble=a(m,{beforeStep:function(){this.options.marker&&this.series.forEach(function(a){a&&a.calculateParentRadius()})},setCircularPositions:function(){var a=\nthis,g=a.box,b=a.nodes,c=2*Math.PI/(b.length+1),e,f,h=a.options.initialPositionRadius;b.forEach(function(d,b){a.options.splitSeries&&!d.isParentNode?(e=d.series.parentNode.plotX,f=d.series.parentNode.plotY):(e=g.width/2,f=g.height/2);d.plotX=d.prevX=y(d.plotX,e+h*Math.cos(d.index||b*c));d.plotY=d.prevY=y(d.plotY,f+h*Math.sin(d.index||b*c));d.dispX=0;d.dispY=0})},repulsiveForces:function(){var a=this,g,b,c,e=a.options.bubblePadding;a.nodes.forEach(function(d){d.degree=d.mass;d.neighbours=0;a.nodes.forEach(function(k){g=\n0;d===k||d.fixedPosition||!a.options.seriesInteraction&&d.series!==k.series||(c=a.getDistXY(d,k),b=a.vectorLength(c)-(d.marker.radius+k.marker.radius+e),0>b&&(d.degree+=.01,d.neighbours++,g=a.repulsiveForce(-b/Math.sqrt(d.neighbours),a.k,d,k)),a.force(\"repulsive\",d,g*k.mass,c,k,b))})})},applyLimitBox:function(a){if(this.options.splitSeries&&!a.isParentNode&&this.options.parentNodeLimit){var d=this.getDistXY(a,a.series.parentNode);var b=a.series.parentNodeRadius-a.marker.radius-this.vectorLength(d);\n0>b&&b>-2*a.marker.radius&&(a.plotX-=.01*d.x,a.plotY-=.01*d.y)}m.prototype.applyLimitBox.apply(this,arguments)}});h(\"packedbubble\",\"bubble\",{minSize:\"10%\",maxSize:\"50%\",sizeBy:\"area\",zoneAxis:\"y\",crisp:!1,tooltip:{pointFormat:\"Value: {point.value}\"},draggable:!0,useSimulation:!0,parentNode:{allowPointSelect:!1},dataLabels:{formatter:function(){return this.point.value},parentNodeFormatter:function(){return this.name},parentNodeTextPath:{enabled:!0},padding:0,style:{transition:\"opacity 2000ms\"}},layoutAlgorithm:{initialPositions:\"circle\",\ninitialPositionRadius:20,bubblePadding:5,parentNodeLimit:!1,seriesInteraction:!0,dragBetweenSeries:!1,parentNodeOptions:{maxIterations:400,gravitationalConstant:.03,maxSpeed:50,initialPositionRadius:100,seriesInteraction:!0,marker:{fillColor:null,fillOpacity:1,lineWidth:1,lineColor:null,symbol:\"circle\"}},enableSimulation:!0,type:\"packedbubble\",integration:\"packedbubble\",maxIterations:1E3,splitSeries:!1,maxSpeed:5,gravitationalConstant:.01,friction:-.981}},{hasDraggableNodes:!0,forces:[\"barycenter\",\n\"repulsive\"],pointArrayMap:[\"value\"],trackerGroups:[\"group\",\"dataLabelsGroup\",\"parentNodesGroup\"],pointValKey:\"value\",isCartesian:!1,requireSorting:!1,directTouch:!0,axisTypes:[],noSharedTooltip:!0,searchPoint:b.noop,accumulateAllPoints:function(a){var d=a.chart,b=[],c,e;for(c=0;c<d.series.length;c++)if(a=d.series[c],a.is(\"packedbubble\")&&a.visible||!d.options.chart.ignoreHiddenSeries)for(e=0;e<a.yData.length;e++)b.push([null,null,a.yData[e],a.index,e,{id:e,marker:{radius:0}}]);return b},init:function(){v.prototype.init.apply(this,\narguments);t(this,\"updatedData\",function(){this.chart.series.forEach(function(a){a.type===this.type&&(a.isDirty=!0)},this)});return this},render:function(){var a=[];v.prototype.render.apply(this,arguments);this.options.dataLabels.allowOverlap||(this.data.forEach(function(d){l(d.dataLabels)&&d.dataLabels.forEach(function(d){a.push(d)})}),this.options.useSimulation&&this.chart.hideOverlappingLabels(a))},setVisible:function(){var a=this;v.prototype.setVisible.apply(a,arguments);a.parentNodeLayout&&a.graph?\na.visible?(a.graph.show(),a.parentNode.dataLabel&&a.parentNode.dataLabel.show()):(a.graph.hide(),a.parentNodeLayout.removeElementFromCollection(a.parentNode,a.parentNodeLayout.nodes),a.parentNode.dataLabel&&a.parentNode.dataLabel.hide()):a.layout&&(a.visible?a.layout.addElementsToCollection(a.points,a.layout.nodes):a.points.forEach(function(d){a.layout.removeElementFromCollection(d,a.layout.nodes)}))},drawDataLabels:function(){var a=this.options.dataLabels.textPath,b=this.points;v.prototype.drawDataLabels.apply(this,\narguments);this.parentNode&&(this.parentNode.formatPrefix=\"parentNode\",this.points=[this.parentNode],this.options.dataLabels.textPath=this.options.dataLabels.parentNodeTextPath,v.prototype.drawDataLabels.apply(this,arguments),this.points=b,this.options.dataLabels.textPath=a)},seriesBox:function(){var a=this.chart,b=Math.max,c=Math.min,e,f=[a.plotLeft,a.plotLeft+a.plotWidth,a.plotTop,a.plotTop+a.plotHeight];this.data.forEach(function(a){B(a.plotX)&&B(a.plotY)&&a.marker.radius&&(e=a.marker.radius,f[0]=\nc(f[0],a.plotX-e),f[1]=b(f[1],a.plotX+e),f[2]=c(f[2],a.plotY-e),f[3]=b(f[3],a.plotY+e))});return w(f.width/f.height)?f:null},calculateParentRadius:function(){var a=this.seriesBox();this.parentNodeRadius=x(Math.sqrt(2*this.parentNodeMass/Math.PI)+20,20,a?Math.max(Math.sqrt(Math.pow(a.width,2)+Math.pow(a.height,2))/2+20,20):Math.sqrt(2*this.parentNodeMass/Math.PI)+20);this.parentNode&&(this.parentNode.marker.radius=this.parentNode.radius=this.parentNodeRadius)},drawGraph:function(){if(this.layout&&\nthis.layout.options.splitSeries){var a=this.chart,b=this.layout.options.parentNodeOptions.marker;b={fill:b.fillColor||q(this.color).brighten(.4).get(),opacity:b.fillOpacity,stroke:b.lineColor||this.color,\"stroke-width\":b.lineWidth};var c=this.visible?\"inherit\":\"hidden\";this.parentNodesGroup||(this.parentNodesGroup=this.plotGroup(\"parentNodesGroup\",\"parentNode\",c,.1,a.seriesGroup),this.group.attr({zIndex:2}));this.calculateParentRadius();c=p({x:this.parentNode.plotX-this.parentNodeRadius,y:this.parentNode.plotY-\nthis.parentNodeRadius,width:2*this.parentNodeRadius,height:2*this.parentNodeRadius},b);this.parentNode.graphic||(this.graph=this.parentNode.graphic=a.renderer.symbol(b.symbol).add(this.parentNodesGroup));this.parentNode.graphic.attr(c)}},createParentNodes:function(){var a=this,b=a.chart,c=a.parentNodeLayout,e,f=a.parentNode,h=a.pointClass;a.parentNodeMass=0;a.points.forEach(function(d){a.parentNodeMass+=Math.PI*Math.pow(d.marker.radius,2)});a.calculateParentRadius();c.nodes.forEach(function(d){d.seriesIndex===\na.index&&(e=!0)});c.setArea(0,0,b.plotWidth,b.plotHeight);e||(f||(f=(new h).init(this,{mass:a.parentNodeRadius/2,marker:{radius:a.parentNodeRadius},dataLabels:{inside:!1},dataLabelOnNull:!0,degree:a.parentNodeRadius,isParentNode:!0,seriesIndex:a.index})),a.parentNode&&(f.plotX=a.parentNode.plotX,f.plotY=a.parentNode.plotY),a.parentNode=f,c.addElementsToCollection([a],c.series),c.addElementsToCollection([f],c.nodes))},drawTracker:function(){var a=this.parentNode;b.TrackerMixin.drawTrackerPoint.call(this);\nif(a){var g=l(a.dataLabels)?a.dataLabels:a.dataLabel?[a.dataLabel]:[];a.graphic&&(a.graphic.element.point=a);g.forEach(function(d){d.div?d.div.point=a:d.element.point=a})}},addSeriesLayout:function(){var a=this.options.layoutAlgorithm,g=this.chart.graphLayoutsStorage,c=this.chart.graphLayoutsLookup,e=p(a,a.parentNodeOptions,{enableSimulation:this.layout.options.enableSimulation});var f=g[a.type+\"-series\"];f||(g[a.type+\"-series\"]=f=new b.layouts[a.type],f.init(e),c.splice(f.index,0,f));this.parentNodeLayout=\nf;this.createParentNodes()},addLayout:function(){var a=this.options.layoutAlgorithm,g=this.chart.graphLayoutsStorage,c=this.chart.graphLayoutsLookup,e=this.chart.options.chart;g||(this.chart.graphLayoutsStorage=g={},this.chart.graphLayoutsLookup=c=[]);var f=g[a.type];f||(a.enableSimulation=B(e.forExport)?!e.forExport:a.enableSimulation,g[a.type]=f=new b.layouts[a.type],f.init(a),c.splice(f.index,0,f));this.layout=f;this.points.forEach(function(a){a.mass=2;a.degree=1;a.collisionNmb=1});f.setArea(0,\n0,this.chart.plotWidth,this.chart.plotHeight);f.addElementsToCollection([this],f.series);f.addElementsToCollection(this.points,f.nodes)},deferLayout:function(){var a=this.options.layoutAlgorithm;this.visible&&(this.addLayout(),a.splitSeries&&this.addSeriesLayout())},translate:function(){var a=this.chart,b=this.data,k=this.index,e,f=this.options.useSimulation;this.processedXData=this.xData;this.generatePoints();B(a.allDataPoints)||(a.allDataPoints=this.accumulateAllPoints(this),this.getPointRadius());\nif(f)var h=a.allDataPoints;else h=this.placeBubbles(a.allDataPoints),this.options.draggable=!1;for(e=0;e<h.length;e++)if(h[e][3]===k){var l=b[h[e][4]];var m=h[e][2];f||(l.plotX=h[e][0]-a.plotLeft+a.diffX,l.plotY=h[e][1]-a.plotTop+a.diffY);l.marker=z(l.marker,{radius:m,width:2*m,height:2*m});l.radius=m}f&&this.deferLayout();c(this,\"afterTranslate\")},checkOverlap:function(a,b){var d=a[0]-b[0],g=a[1]-b[1];return-.001>Math.sqrt(d*d+g*g)-Math.abs(a[2]+b[2])},positionBubble:function(a,b,c){var d=Math.sqrt,\ng=Math.asin,k=Math.acos,e=Math.pow,f=Math.abs;d=d(e(a[0]-b[0],2)+e(a[1]-b[1],2));k=k((e(d,2)+e(c[2]+b[2],2)-e(c[2]+a[2],2))/(2*(c[2]+b[2])*d));g=g(f(a[0]-b[0])/d);a=(0>a[1]-b[1]?0:Math.PI)+k+g*(0>(a[0]-b[0])*(a[1]-b[1])?1:-1);return[b[0]+(b[2]+c[2])*Math.sin(a),b[1]-(b[2]+c[2])*Math.cos(a),c[2],c[3],c[4]]},placeBubbles:function(a){var b=this.checkOverlap,d=this.positionBubble,c=[],e=1,f=0,h=0;var l=[];var m;a=a.sort(function(a,b){return b[2]-a[2]});if(a.length){c.push([[0,0,a[0][2],a[0][3],a[0][4]]]);\nif(1<a.length)for(c.push([[0,0-a[1][2]-a[0][2],a[1][2],a[1][3],a[1][4]]]),m=2;m<a.length;m++)a[m][2]=a[m][2]||1,l=d(c[e][f],c[e-1][h],a[m]),b(l,c[e][0])?(c.push([]),h=0,c[e+1].push(d(c[e][f],c[e][0],a[m])),e++,f=0):1<e&&c[e-1][h+1]&&b(l,c[e-1][h+1])?(h++,c[e].push(d(c[e][f],c[e-1][h],a[m])),f++):(f++,c[e].push(l));this.chart.stages=c;this.chart.rawPositions=[].concat.apply([],c);this.resizeRadius();l=this.chart.rawPositions}return l},resizeRadius:function(){var a=this.chart,b=a.rawPositions,c=Math.min,\ne=Math.max,f=a.plotLeft,h=a.plotTop,l=a.plotHeight,m=a.plotWidth,n,p,q;var t=n=Number.POSITIVE_INFINITY;var v=p=Number.NEGATIVE_INFINITY;for(q=0;q<b.length;q++){var w=b[q][2];t=c(t,b[q][0]-w);v=e(v,b[q][0]+w);n=c(n,b[q][1]-w);p=e(p,b[q][1]+w)}q=[v-t,p-n];c=c.apply([],[(m-f)/q[0],(l-h)/q[1]]);if(1e-10<Math.abs(c-1)){for(q=0;q<b.length;q++)b[q][2]*=c;this.placeBubbles(b)}else a.diffY=l/2+h-n-(p-n)/2,a.diffX=m/2+f-t-(v-t)/2},calculateZExtremes:function(){var a=this.options.zMin,b=this.options.zMax,c=\nInfinity,e=-Infinity;if(a&&b)return[a,b];this.chart.series.forEach(function(a){a.yData.forEach(function(a){B(a)&&(a>e&&(e=a),a<c&&(c=a))})});a=y(a,c);b=y(b,e);return[a,b]},getPointRadius:function(){var a=this,b=a.chart,c=a.options,e=c.useSimulation,f=Math.min(b.plotWidth,b.plotHeight),h={},l=[],m=b.allDataPoints,n,p,q,t;[\"minSize\",\"maxSize\"].forEach(function(a){var b=parseInt(c[a],10),d=/%$/.test(c[a]);h[a]=d?f*b/100:b*Math.sqrt(m.length)});b.minRadius=n=h.minSize/Math.sqrt(m.length);b.maxRadius=\np=h.maxSize/Math.sqrt(m.length);var v=e?a.calculateZExtremes():[n,p];(m||[]).forEach(function(b,c){q=e?x(b[2],v[0],v[1]):b[2];t=a.getRadius(v[0],v[1],n,p,q);0===t&&(t=null);m[c][2]=t;l.push(t)});a.radii=l},redrawHalo:n.redrawHalo,onMouseDown:n.onMouseDown,onMouseMove:n.onMouseMove,onMouseUp:function(a){if(a.fixedPosition&&!a.removed){var b,c,d=this.layout,e=this.parentNodeLayout;e&&d.options.dragBetweenSeries&&e.nodes.forEach(function(g){a&&a.marker&&g!==a.series.parentNode&&(b=d.getDistXY(a,g),c=\nd.vectorLength(b)-g.marker.radius-a.marker.radius,0>c&&(g.series.addPoint(p(a.options,{plotX:a.plotX,plotY:a.plotY}),!1),d.removeElementFromCollection(a,d.nodes),a.remove()))});n.onMouseUp.apply(this,arguments)}},destroy:function(){this.chart.graphLayoutsLookup&&this.chart.graphLayoutsLookup.forEach(function(a){a.removeElementFromCollection(this,a.series)},this);this.parentNode&&(this.parentNodeLayout.removeElementFromCollection(this.parentNode,this.parentNodeLayout.nodes),this.parentNode.dataLabel&&\n(this.parentNode.dataLabel=this.parentNode.dataLabel.destroy()));b.Series.prototype.destroy.apply(this,arguments)},alignDataLabel:b.Series.prototype.alignDataLabel},{destroy:function(){this.series.layout&&this.series.layout.removeElementFromCollection(this,this.series.layout.nodes);return e.prototype.destroy.apply(this,arguments)},firePointEvent:function(a,b,c){var d=this.series.options;if(this.isParentNode&&d.parentNode){var g=d.allowPointSelect;d.allowPointSelect=d.parentNode.allowPointSelect;e.prototype.firePointEvent.apply(this,\narguments);d.allowPointSelect=g}else e.prototype.firePointEvent.apply(this,arguments)},select:function(a,c){var d=this.series.chart;this.isParentNode?(d.getSelectedPoints=d.getSelectedParentNodes,e.prototype.select.apply(this,arguments),d.getSelectedPoints=b.Chart.prototype.getSelectedPoints):e.prototype.select.apply(this,arguments)}});t(f,\"beforeRedraw\",function(){this.allDataPoints&&delete this.allDataPoints});\"\"});C(f,\"parts-more/Polar.js\",[f[\"parts/Chart.js\"],f[\"parts/Globals.js\"],f[\"parts-more/Pane.js\"],\nf[\"parts/Pointer.js\"],f[\"parts/SVGRenderer.js\"],f[\"parts/Utilities.js\"]],function(f,a,b,e,h,q){var t=q.addEvent,x=q.animObject,B=q.defined,z=q.find,c=q.isNumber,l=q.pick,w=q.splat,p=q.uniqueKey,y=q.wrap,v=a.Series,m=a.seriesTypes,n=v.prototype;e=e.prototype;n.searchPointByAngle=function(a){var b=this.chart,c=this.xAxis.pane.center;return this.searchKDTree({clientX:180+-180/Math.PI*Math.atan2(a.chartX-c[0]-b.plotLeft,a.chartY-c[1]-b.plotTop)})};n.getConnectors=function(a,b,c,d){var g=d?1:0;var e=0<=\nb&&b<=a.length-1?b:0>b?a.length-1+b:0;b=0>e-1?a.length-(1+g):e-1;g=e+1>a.length-1?g:e+1;var f=a[b];g=a[g];var k=f.plotX;f=f.plotY;var h=g.plotX;var l=g.plotY;g=a[e].plotX;e=a[e].plotY;k=(1.5*g+k)/2.5;f=(1.5*e+f)/2.5;h=(1.5*g+h)/2.5;var m=(1.5*e+l)/2.5;l=Math.sqrt(Math.pow(k-g,2)+Math.pow(f-e,2));var n=Math.sqrt(Math.pow(h-g,2)+Math.pow(m-e,2));k=Math.atan2(f-e,k-g);m=Math.PI/2+(k+Math.atan2(m-e,h-g))/2;Math.abs(k-m)>Math.PI/2&&(m-=Math.PI);k=g+Math.cos(m)*l;f=e+Math.sin(m)*l;h=g+Math.cos(Math.PI+\nm)*n;m=e+Math.sin(Math.PI+m)*n;g={rightContX:h,rightContY:m,leftContX:k,leftContY:f,plotX:g,plotY:e};c&&(g.prevPointCont=this.getConnectors(a,b,!1,d));return g};n.toXY=function(a){var b=this.chart,c=this.xAxis;var d=this.yAxis;var e=a.plotX,g=a.plotY,f=a.series,h=b.inverted,l=a.y,m=h?e:d.len-g;h&&f&&!f.isRadialBar&&(a.plotY=g=\"number\"===typeof l?d.translate(l)||0:0);a.rectPlotX=e;a.rectPlotY=g;d.center&&(m+=d.center[3]/2);d=h?d.postTranslate(g,m):c.postTranslate(e,m);a.plotX=a.polarPlotX=d.x-b.plotLeft;\na.plotY=a.polarPlotY=d.y-b.plotTop;this.kdByAngle?(b=(e/Math.PI*180+c.pane.options.startAngle)%360,0>b&&(b+=360),a.clientX=b):a.clientX=a.plotX};m.spline&&(y(m.spline.prototype,\"getPointSpline\",function(a,b,c,d){this.chart.polar?d?(a=this.getConnectors(b,d,!0,this.connectEnds),a=[\"C\",a.prevPointCont.rightContX,a.prevPointCont.rightContY,a.leftContX,a.leftContY,a.plotX,a.plotY]):a=[\"M\",c.plotX,c.plotY]:a=a.call(this,b,c,d);return a}),m.areasplinerange&&(m.areasplinerange.prototype.getPointSpline=m.spline.prototype.getPointSpline));\nt(v,\"afterTranslate\",function(){var b=this.chart;if(b.polar&&this.xAxis){(this.kdByAngle=b.tooltip&&b.tooltip.shared)?this.searchPoint=this.searchPointByAngle:this.options.findNearestPointBy=\"xy\";if(!this.preventPostTranslate)for(var c=this.points,d=c.length;d--;)this.toXY(c[d]),!b.hasParallelCoordinates&&!this.yAxis.reversed&&c[d].y<this.yAxis.min&&(c[d].isNull=!0);this.hasClipCircleSetter||(this.hasClipCircleSetter=!!this.eventsToUnbind.push(t(this,\"afterRender\",function(){if(b.polar){var c=this.yAxis.pane.center;\nthis.clipCircle?this.clipCircle.animate({x:c[0],y:c[1],r:c[2]/2,innerR:c[3]/2}):this.clipCircle=b.renderer.clipCircle(c[0],c[1],c[2]/2,c[3]/2);this.group.clip(this.clipCircle);this.setClip=a.noop}})))}},{order:2});y(n,\"getGraphPath\",function(a,b){var c=this,d;if(this.chart.polar){b=b||this.points;for(d=0;d<b.length;d++)if(!b[d].isNull){var e=d;break}if(!1!==this.options.connectEnds&&\"undefined\"!==typeof e){this.connectEnds=!0;b.splice(b.length,0,b[e]);var g=!0}b.forEach(function(a){\"undefined\"===\ntypeof a.polarPlotY&&c.toXY(a)})}d=a.apply(this,[].slice.call(arguments,1));g&&b.pop();return d});var d=function(b,c){var d=this,e=this.chart,f=this.options.animation,g=this.group,k=this.markerGroup,h=this.xAxis.center,m=e.plotLeft,n=e.plotTop,p,q,t,v;if(e.polar)if(d.isRadialBar)c||(d.startAngleRad=l(d.translatedThreshold,d.xAxis.startAngleRad),a.seriesTypes.pie.prototype.animate.call(d,c));else{if(e.renderer.isSVG)if(f=x(f),d.is(\"column\")){if(!c){var w=h[3]/2;d.points.forEach(function(a){p=a.graphic;\nt=(q=a.shapeArgs)&&q.r;v=q&&q.innerR;p&&q&&(p.attr({r:w,innerR:w}),p.animate({r:t,innerR:v},d.options.animation))})}}else c?(b={translateX:h[0]+m,translateY:h[1]+n,scaleX:.001,scaleY:.001},g.attr(b),k&&k.attr(b)):(b={translateX:m,translateY:n,scaleX:1,scaleY:1},g.animate(b,f),k&&k.animate(b,f))}else b.call(this,c)};y(n,\"animate\",d);m.column&&(v=m.arearange.prototype,m=m.column.prototype,m.polarArc=function(a,b,c,d){var e=this.xAxis.center,f=this.yAxis.len,g=e[3]/2;b=f-b+g;a=f-l(a,f)+g;this.yAxis.reversed&&\n(0>b&&(b=g),0>a&&(a=g));return{x:e[0],y:e[1],r:b,innerR:a,start:c,end:d}},y(m,\"animate\",d),y(m,\"translate\",function(a){var b=this.options,d=b.stacking,e=this.chart,f=this.xAxis,g=this.yAxis,h=g.reversed,l=g.center,m=f.startAngleRad,n=f.endAngleRad-m;this.preventPostTranslate=!0;a.call(this);if(f.isRadial){a=this.points;f=a.length;var p=g.translate(g.min);var t=g.translate(g.max);b=b.threshold||0;if(e.inverted&&c(b)){var v=g.translate(b);B(v)&&(0>v?v=0:v>n&&(v=n),this.translatedThreshold=v+m)}for(;f--;){b=\na[f];var w=b.barX;var z=b.x;var y=b.y;b.shapeType=\"arc\";if(e.inverted){b.plotY=g.translate(y);if(d&&g.stacking){if(y=g.stacking.stacks[(0>y?\"-\":\"\")+this.stackKey],this.visible&&y&&y[z]&&!b.isNull){var x=y[z].points[this.getStackIndicator(void 0,z,this.index).key];var C=g.translate(x[0]);x=g.translate(x[1]);B(C)&&(C=q.clamp(C,0,n))}}else C=v,x=b.plotY;C>x&&(x=[C,C=x][0]);if(!h)if(C<p)C=p;else if(x>t)x=t;else{if(x<p||C>t)C=x=0}else if(x>p)x=p;else if(C<t)C=t;else if(C>p||x<t)C=x=n;g.min>g.max&&(C=x=\nh?n:0);C+=m;x+=m;l&&(b.barX=w+=l[3]/2);z=Math.max(w,0);y=Math.max(w+b.pointWidth,0);b.shapeArgs={x:l&&l[0],y:l&&l[1],r:y,innerR:z,start:C,end:x};b.opacity=C===x?0:void 0;b.plotY=(B(this.translatedThreshold)&&(C<this.translatedThreshold?C:x))-m}else C=w+m,b.shapeArgs=this.polarArc(b.yBottom,b.plotY,C,C+b.pointWidth);this.toXY(b);e.inverted?(w=g.postTranslate(b.rectPlotY,w+b.pointWidth/2),b.tooltipPos=[w.x-e.plotLeft,w.y-e.plotTop]):b.tooltipPos=[b.plotX,b.plotY];l&&(b.ttBelow=b.plotY>l[1])}}}),m.findAlignments=\nfunction(a,b){null===b.align&&(b.align=20<a&&160>a?\"left\":200<a&&340>a?\"right\":\"center\");null===b.verticalAlign&&(b.verticalAlign=45>a||315<a?\"bottom\":135<a&&225>a?\"top\":\"middle\");return b},v&&(v.findAlignments=m.findAlignments),y(m,\"alignDataLabel\",function(a,b,c,d,e,f){var g=this.chart,h=l(d.inside,!!this.options.stacking);g.polar?(a=b.rectPlotX/Math.PI*180,g.inverted?(this.forceDL=g.isInsidePlot(b.plotX,Math.round(b.plotY),!1),h&&b.shapeArgs?(e=b.shapeArgs,e=this.yAxis.postTranslate((e.start+e.end)/\n2-this.xAxis.startAngleRad,b.barX+b.pointWidth/2),e={x:e.x-g.plotLeft,y:e.y-g.plotTop}):b.tooltipPos&&(e={x:b.tooltipPos[0],y:b.tooltipPos[1]}),d.align=l(d.align,\"center\"),d.verticalAlign=l(d.verticalAlign,\"middle\")):this.findAlignments&&(d=this.findAlignments(a,d)),n.alignDataLabel.call(this,b,c,d,e,f),this.isRadialBar&&b.shapeArgs&&b.shapeArgs.start===b.shapeArgs.end&&c.hide(!0)):a.call(this,b,c,d,e,f)}));y(e,\"getCoordinates\",function(a,b){var c=this.chart,d={xAxis:[],yAxis:[]};c.polar?c.axes.forEach(function(a){var e=\na.isXAxis,f=a.center;if(\"colorAxis\"!==a.coll){var g=b.chartX-f[0]-c.plotLeft;f=b.chartY-f[1]-c.plotTop;d[e?\"xAxis\":\"yAxis\"].push({axis:a,value:a.translate(e?Math.PI-Math.atan2(g,f):Math.sqrt(Math.pow(g,2)+Math.pow(f,2)),!0)})}}):d=a.call(this,b);return d});h.prototype.clipCircle=function(a,b,c,d){var e=p(),f=this.createElement(\"clipPath\").attr({id:e}).add(this.defs);a=d?this.arc(a,b,c,d,0,2*Math.PI).add(f):this.circle(a,b,c).add(f);a.id=e;a.clipPath=f;return a};t(f,\"getAxes\",function(){this.pane||\n(this.pane=[]);w(this.options.pane).forEach(function(a){new b(a,this)},this)});t(f,\"afterDrawChartBox\",function(){this.pane.forEach(function(a){a.render()})});t(a.Series,\"afterInit\",function(){var a=this.chart;a.inverted&&a.polar&&(this.isRadialSeries=!0,this.is(\"column\")&&(this.isRadialBar=!0))});y(f.prototype,\"get\",function(a,b){return z(this.pane,function(a){return a.options.id===b})||a.call(this,b)})});C(f,\"masters/highcharts-more.src.js\",[],function(){})});\n//# sourceMappingURL=highcharts-more.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///M8aS\n");

/***/ })

}]);